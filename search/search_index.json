{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"README Collections of snippets, thoughts, and junk. If you're unfamiliar with the concept of a digital garden, Organizing This Space might be helpful. News and Current Developments JavaScript jest and react testing idioms Thoughts on dark(er) themes in fiction Some thoughts on implementing a digital garden that explains some of the ideas behind this space. Recent and recommended... Python Advent of Code 2022 Python Slack Example SQLAlchemy One-to-Many Javascript JavaScript mapWhen function . Complex comparator function","title":"README"},{"location":"#readme","text":"Collections of snippets, thoughts, and junk. If you're unfamiliar with the concept of a digital garden, Organizing This Space might be helpful.","title":"README"},{"location":"#news-and-current-developments","text":"JavaScript jest and react testing idioms Thoughts on dark(er) themes in fiction Some thoughts on implementing a digital garden that explains some of the ideas behind this space.","title":"News and Current Developments"},{"location":"#recent-and-recommended","text":"","title":"Recent and recommended..."},{"location":"#python","text":"Advent of Code 2022 Python Slack Example SQLAlchemy One-to-Many","title":"Python"},{"location":"#javascript","text":"JavaScript mapWhen function . Complex comparator function","title":"Javascript"},{"location":"Ada_Capstone_Documentation/concept_map_draft_2022-12-11/","text":"Concept Map + Search Proposal - Kae Job Sluder Team members (Leave blank for none) Document Theme Song Start Shootin' - Americana Remix Problem Statement #1 Search engines currently provide minimal scaffolding for focused topic research. This project will reimagine the search interface by: Providing a meta-search tool that incorporates results from general and specialized search engines. Encouraging the user to construct queries built on complete questions. Keeping track of how questions change through the search process. Encouraging the user to evaluate search results and add them to a growing concept map. MVP Feature Set Feature More info on feature Potential Additional Features additional feature Draft Technology Choices Front end: Electron or Browser using local storage Additional content, diagrams, wireframes, user flows, etc. Link, attach, or insert any additional content here.","title":"Concept Map + Search Proposal - Kae Job Sluder"},{"location":"Ada_Capstone_Documentation/concept_map_draft_2022-12-11/#concept-map-search-proposal-kae-job-sluder","text":"","title":"Concept Map + Search Proposal - Kae Job Sluder"},{"location":"Ada_Capstone_Documentation/concept_map_draft_2022-12-11/#team-members-leave-blank-for-none","text":"Document Theme Song Start Shootin' - Americana Remix","title":"Team members (Leave blank for none)"},{"location":"Ada_Capstone_Documentation/concept_map_draft_2022-12-11/#problem-statement-1","text":"Search engines currently provide minimal scaffolding for focused topic research. This project will reimagine the search interface by: Providing a meta-search tool that incorporates results from general and specialized search engines. Encouraging the user to construct queries built on complete questions. Keeping track of how questions change through the search process. Encouraging the user to evaluate search results and add them to a growing concept map.","title":"Problem Statement #1"},{"location":"Ada_Capstone_Documentation/concept_map_draft_2022-12-11/#mvp-feature-set","text":"Feature More info on feature","title":"MVP Feature Set"},{"location":"Ada_Capstone_Documentation/concept_map_draft_2022-12-11/#potential-additional-features","text":"additional feature","title":"Potential Additional Features"},{"location":"Ada_Capstone_Documentation/concept_map_draft_2022-12-11/#draft-technology-choices","text":"Front end: Electron or Browser using local storage","title":"Draft Technology Choices"},{"location":"Ada_Capstone_Documentation/concept_map_draft_2022-12-11/#additional-content-diagrams-wireframes-user-flows-etc","text":"Link, attach, or insert any additional content here.","title":"Additional content, diagrams, wireframes, user flows, etc."},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/","text":"Drama Llama (Working Title) - Kae Job Sluder Team members (Leave blank for none) Document Theme Song [We Don't Need This] Fascist Groove Thang (Extended Mix) Problem Statement #1 The problem with someone's wrong on the internet anger is that someone is always wrong on the internet. (Sometimes it's you.) Using the internet requires carefully curating or filtering through abundant low-quality content. Some of the issues include: Opinion pieces presented as factual news Low-research articles Overgeneralization from hot-takes Self-promotional material Meta-controversy about what someone else said on the internet about something that happened on the internet Explicit prejudice and harassment Context collapse Attempts by large social media companies to develop a centralized response to biased, inflammatory, and misleading information has become mired in political controversy. On top of that, those responses have become limited by a business model that monetizes user clicks and data about user clicks. Algorithmic views of information reinforce user behavior, especially when user behavior is addictive or compulsive. An evening of \"doomscrolling\" can bias the algorithm to presenting more of the same content, with trivial differences in information from article to article and post to post. Drama Llama is a curation- and filter-first newsreader. Users can build filters using keyword, regex, and trainable natural language processing (NLP) tools. This app will apply the same strategies used to detect email spam to helping users curate, summarize, and tag individual articles or posts. The user can choose to display this metadata at the headline level or use it to filter views. MVP Feature Set RSS fetching and viewing RSS is an XML standard for providing website, article, and post summaries. While many sites have moved away from RSS, it's still widely used. Keyword or regex tagging Simple search on feed content. Natural Language Processing (NLP) tags The first prototype will use very basic NLP algorithms such as Sentiment Analysis, Naive Bayesian Analysis, and/or Logistic Regression to tag text. These filters can be trained via user curation, and offer reasonable accuracy without extensive machine learning. Desktop app or desktop browser app I think this will be challenging enough without trying to adapt to small-screen controls. Filter wizard Drama Llama can suggest filters based on common patterns. Potential Additional Features Machine Learning tagging using existing models Cross-platform testing Additional API and RSS integration Draft Technology Choices Front end: Electron or Browser using localStorage or indexedDB Natural (JS) provides tools for basic language processing including statistical classification algorithms Multiple machine learning/AI models exist for this kind of thing, more research is needed SQLite or other embedded data-storage solution JavaScript or Typescript depending on level of support React + css framework. Additional content, diagrams, wireframes, user flows, etc. Link, attach, or insert any additional content here.","title":"Drama Llama (Working Title) - Kae Job Sluder"},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/#drama-llama-working-title-kae-job-sluder","text":"","title":"Drama Llama (Working Title) - Kae Job Sluder"},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/#team-members-leave-blank-for-none","text":"Document Theme Song [We Don't Need This] Fascist Groove Thang (Extended Mix)","title":"Team members (Leave blank for none)"},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/#problem-statement-1","text":"The problem with someone's wrong on the internet anger is that someone is always wrong on the internet. (Sometimes it's you.) Using the internet requires carefully curating or filtering through abundant low-quality content. Some of the issues include: Opinion pieces presented as factual news Low-research articles Overgeneralization from hot-takes Self-promotional material Meta-controversy about what someone else said on the internet about something that happened on the internet Explicit prejudice and harassment Context collapse Attempts by large social media companies to develop a centralized response to biased, inflammatory, and misleading information has become mired in political controversy. On top of that, those responses have become limited by a business model that monetizes user clicks and data about user clicks. Algorithmic views of information reinforce user behavior, especially when user behavior is addictive or compulsive. An evening of \"doomscrolling\" can bias the algorithm to presenting more of the same content, with trivial differences in information from article to article and post to post. Drama Llama is a curation- and filter-first newsreader. Users can build filters using keyword, regex, and trainable natural language processing (NLP) tools. This app will apply the same strategies used to detect email spam to helping users curate, summarize, and tag individual articles or posts. The user can choose to display this metadata at the headline level or use it to filter views.","title":"Problem Statement #1"},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/#mvp-feature-set","text":"RSS fetching and viewing RSS is an XML standard for providing website, article, and post summaries. While many sites have moved away from RSS, it's still widely used. Keyword or regex tagging Simple search on feed content. Natural Language Processing (NLP) tags The first prototype will use very basic NLP algorithms such as Sentiment Analysis, Naive Bayesian Analysis, and/or Logistic Regression to tag text. These filters can be trained via user curation, and offer reasonable accuracy without extensive machine learning. Desktop app or desktop browser app I think this will be challenging enough without trying to adapt to small-screen controls. Filter wizard Drama Llama can suggest filters based on common patterns.","title":"MVP Feature Set"},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/#potential-additional-features","text":"Machine Learning tagging using existing models Cross-platform testing Additional API and RSS integration","title":"Potential Additional Features"},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/#draft-technology-choices","text":"Front end: Electron or Browser using localStorage or indexedDB Natural (JS) provides tools for basic language processing including statistical classification algorithms Multiple machine learning/AI models exist for this kind of thing, more research is needed SQLite or other embedded data-storage solution JavaScript or Typescript depending on level of support React + css framework.","title":"Draft Technology Choices"},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/#additional-content-diagrams-wireframes-user-flows-etc","text":"Link, attach, or insert any additional content here.","title":"Additional content, diagrams, wireframes, user flows, etc."},{"location":"Ada_Capstone_Documentation/library_bookmarks/","text":"Capstone library bookmarks Luxon : Time conversion and pretty-printing. Ramda : Functional utility library. react-markdown : Markdown to react DOM rendering. axios : HTTP client. FeedParser : RSS parsing library.","title":"Capstone library bookmarks"},{"location":"Ada_Capstone_Documentation/library_bookmarks/#capstone-library-bookmarks","text":"Luxon : Time conversion and pretty-printing. Ramda : Functional utility library. react-markdown : Markdown to react DOM rendering. axios : HTTP client. FeedParser : RSS parsing library.","title":"Capstone library bookmarks"},{"location":"Clojure/clojure-vscode-debugging/","text":"Debugging clojure in VS Code Calva Instrument functions for debugging with ctrl+alt+c i Instrument a function manually with #dbg (as opposed to the above command) Set individual breakpoints with #break Other Tools Clojure observability tools","title":"Debugging clojure in VS Code"},{"location":"Clojure/clojure-vscode-debugging/#debugging-clojure-in-vs-code","text":"","title":"Debugging clojure in VS Code"},{"location":"Clojure/clojure-vscode-debugging/#calva","text":"Instrument functions for debugging with ctrl+alt+c i Instrument a function manually with #dbg (as opposed to the above command) Set individual breakpoints with #break","title":"Calva"},{"location":"Clojure/clojure-vscode-debugging/#other-tools","text":"Clojure observability tools","title":"Other Tools"},{"location":"Clojure/figwheel-cli-tools-setup/","text":"Working Figwheel Setup Running clojure -m figwheel.main --build dev --repl # or clojure -M:fig -b dev -r deps.edn {:deps {org.clojure/clojure {:mvn/version \"1.9.0\"} org.clojure/clojurescript {:mvn/version \"1.10.773\"} com.bhauman/figwheel-main {:mvn/version \"0.2.18\"} ;; optional but recommended com.bhauman/rebel-readline-cljs {:mvn/version \"0.1.4\"}} :aliases {:fig {:main-opts [\"-m\" \"figwheel.main\"]}}} dev.cljs.edn Defines the main function for a build. ^{:extra-main-files {:testing {:main example.test-runner}}} {:main example.core} figwheel.edn {:watch-dirs [\"src\" \"test\"] :css-dirs [\"resources/public/css\"] :auto-testing true} test runner ;; This test runner is intended to be run from the command line (ns intentional-startpage.test-runner (:require [cljs-test-display.core] [cljs.test :refer-macros [run-tests]] ;; require all the namespaces that have tests in them [intentional-startpage.core-test] [intentional-startpage.weather-test])) (run-tests (cljs-test-display.core/init! \"app\") 'intentional-startpage.core-test 'intentional-startpage.weather-test) Local Help clj -M:fig -h Auto testing URL: http://localhost:9500/figwheel-extra-main/auto-testing Source: figwheel docs: Testing . Source: figwheel docs: Installation","title":"Working Figwheel Setup"},{"location":"Clojure/figwheel-cli-tools-setup/#working-figwheel-setup","text":"","title":"Working Figwheel Setup"},{"location":"Clojure/figwheel-cli-tools-setup/#running","text":"clojure -m figwheel.main --build dev --repl # or clojure -M:fig -b dev -r","title":"Running"},{"location":"Clojure/figwheel-cli-tools-setup/#depsedn","text":"{:deps {org.clojure/clojure {:mvn/version \"1.9.0\"} org.clojure/clojurescript {:mvn/version \"1.10.773\"} com.bhauman/figwheel-main {:mvn/version \"0.2.18\"} ;; optional but recommended com.bhauman/rebel-readline-cljs {:mvn/version \"0.1.4\"}} :aliases {:fig {:main-opts [\"-m\" \"figwheel.main\"]}}}","title":"deps.edn"},{"location":"Clojure/figwheel-cli-tools-setup/#devcljsedn","text":"Defines the main function for a build. ^{:extra-main-files {:testing {:main example.test-runner}}} {:main example.core}","title":"dev.cljs.edn"},{"location":"Clojure/figwheel-cli-tools-setup/#figwheeledn","text":"{:watch-dirs [\"src\" \"test\"] :css-dirs [\"resources/public/css\"] :auto-testing true}","title":"figwheel.edn"},{"location":"Clojure/figwheel-cli-tools-setup/#test-runner","text":";; This test runner is intended to be run from the command line (ns intentional-startpage.test-runner (:require [cljs-test-display.core] [cljs.test :refer-macros [run-tests]] ;; require all the namespaces that have tests in them [intentional-startpage.core-test] [intentional-startpage.weather-test])) (run-tests (cljs-test-display.core/init! \"app\") 'intentional-startpage.core-test 'intentional-startpage.weather-test)","title":"test runner"},{"location":"Clojure/figwheel-cli-tools-setup/#local-help","text":"clj -M:fig -h Auto testing URL: http://localhost:9500/figwheel-extra-main/auto-testing Source: figwheel docs: Testing . Source: figwheel docs: Installation","title":"Local Help"},{"location":"Clojure/map-reduce-notes/","text":"Clojure map and reduce notes Map (map hash-map list) can take a hash-map rather than a function and will return all items translated by the hash-map.","title":"Clojure map and reduce notes"},{"location":"Clojure/map-reduce-notes/#clojure-map-and-reduce-notes","text":"","title":"Clojure map and reduce notes"},{"location":"Clojure/map-reduce-notes/#map","text":"(map hash-map list) can take a hash-map rather than a function and will return all items translated by the hash-map.","title":"Map"},{"location":"Digital_Garden_Thoughts/dg1-digita-garden-notes/","text":"Digital Garden Design and Implementation Notes The Technical Spent a day evaluating ways to share my garden beyond giving people a link to the github repo (which is still on the table BTW). There's a class of software that translates markdown-html while providing indexes, styling, and everything else we expect from a \"modern\" personal web site. After trying out Pelican , hugo , zola , and mkDocs , I ended up with mkDocs. Which makes my brain look like an open-source project, and I guess it is. The primary technical annoyance is that most of my note-taking and note-reading happens in the editor. So preserving folder structure and ability to follow links in-editor were both important. Pelican converts folder hierarchies into category tags. Both hugo and zola required additional work to get into deep trees. mkDocs respected folder hierarchy and gave me what I was about to create for myself with three lines of config: site_name: My Mental Rummage Sale site_url: https://example.com/ theme: readthedocs Philosophical A lot of this is converging on Tom Critchlow's ideas regarding gardens, streams, and campfires . Some of the problems with the design of social media include: Unmoderated spaces tend to favor the loudest and most aggressive voices. This is an effect we've studied since the 90s. Conversely, \"hot takes\" get more views, which in turn get more boosts. Social pressure to perform on a daily or weekly basis. The relationship between ephemera and creative work gets inverted. We archive ephemeral ideas for decades while more reflective work gets buried and lost. I have a bit of bias here. I'm a recovering social media addict, so I need to be extremely careful about how and what I post online. The problem with \"someone's wrong on the internet\" rage is that someone is always wrong on the internet. And it's easy to get stuck fighting the same arguments online your friends and family have already agreed to disagree on. I had an anonymous blog (in hugo) for years and eventually killed it because while some ideas were good, others made me actively uncomfortable after life changed my perspective. At the same time, I recognize the value of getting work out there, even imperfect work. So anyway, trying out a digital garden where anything can be pruned. Most of it won't be interesting, and the piles of dirt, wheelbarrows, and paving stones are conspicuously visible. People who want more day-to-day stream-like stuff can find me on any of the smaller communities I feel comfortable engaging in. first draft: 2022-11-19","title":"Digital Garden Design and Implementation Notes"},{"location":"Digital_Garden_Thoughts/dg1-digita-garden-notes/#digital-garden-design-and-implementation-notes","text":"","title":"Digital Garden Design and Implementation Notes"},{"location":"Digital_Garden_Thoughts/dg1-digita-garden-notes/#the-technical","text":"Spent a day evaluating ways to share my garden beyond giving people a link to the github repo (which is still on the table BTW). There's a class of software that translates markdown-html while providing indexes, styling, and everything else we expect from a \"modern\" personal web site. After trying out Pelican , hugo , zola , and mkDocs , I ended up with mkDocs. Which makes my brain look like an open-source project, and I guess it is. The primary technical annoyance is that most of my note-taking and note-reading happens in the editor. So preserving folder structure and ability to follow links in-editor were both important. Pelican converts folder hierarchies into category tags. Both hugo and zola required additional work to get into deep trees. mkDocs respected folder hierarchy and gave me what I was about to create for myself with three lines of config: site_name: My Mental Rummage Sale site_url: https://example.com/ theme: readthedocs","title":"The Technical"},{"location":"Digital_Garden_Thoughts/dg1-digita-garden-notes/#philosophical","text":"A lot of this is converging on Tom Critchlow's ideas regarding gardens, streams, and campfires . Some of the problems with the design of social media include: Unmoderated spaces tend to favor the loudest and most aggressive voices. This is an effect we've studied since the 90s. Conversely, \"hot takes\" get more views, which in turn get more boosts. Social pressure to perform on a daily or weekly basis. The relationship between ephemera and creative work gets inverted. We archive ephemeral ideas for decades while more reflective work gets buried and lost. I have a bit of bias here. I'm a recovering social media addict, so I need to be extremely careful about how and what I post online. The problem with \"someone's wrong on the internet\" rage is that someone is always wrong on the internet. And it's easy to get stuck fighting the same arguments online your friends and family have already agreed to disagree on. I had an anonymous blog (in hugo) for years and eventually killed it because while some ideas were good, others made me actively uncomfortable after life changed my perspective. At the same time, I recognize the value of getting work out there, even imperfect work. So anyway, trying out a digital garden where anything can be pruned. Most of it won't be interesting, and the piles of dirt, wheelbarrows, and paving stones are conspicuously visible. People who want more day-to-day stream-like stuff can find me on any of the smaller communities I feel comfortable engaging in. first draft: 2022-11-19","title":"Philosophical"},{"location":"Digital_Garden_Thoughts/dg2_publishing%20to%20github/","text":"Publishing to Github and Settling on MkDocs I spent part of my week working on rolling my own static site builder using clojure stasis . There are lots of things I like about clojure, but I feel like I'm hitting a point where it would be much easier to learn it if I knew a bit more JavaScript or Java. Transfer from lisp/scheme gets more limited when I hit domains where clojure says, \"just use the Java/JavaScript native functions.\" So, I set this up on github pages using MkDocs and Material for MkDocs , more for some add-on features like recording the last-modified (according to git) date. Some rabbit holes for the future include post-hoc keywords rather than a priori tags, and modding the fonts to look a bit less formal. Maybe... I'll rotate in Papyrus or Comic Sans just to annoy certain people ..","title":"Publishing to Github and Settling on MkDocs"},{"location":"Digital_Garden_Thoughts/dg2_publishing%20to%20github/#publishing-to-github-and-settling-on-mkdocs","text":"I spent part of my week working on rolling my own static site builder using clojure stasis . There are lots of things I like about clojure, but I feel like I'm hitting a point where it would be much easier to learn it if I knew a bit more JavaScript or Java. Transfer from lisp/scheme gets more limited when I hit domains where clojure says, \"just use the Java/JavaScript native functions.\" So, I set this up on github pages using MkDocs and Material for MkDocs , more for some add-on features like recording the last-modified (according to git) date. Some rabbit holes for the future include post-hoc keywords rather than a priori tags, and modding the fonts to look a bit less formal. Maybe... I'll rotate in Papyrus or Comic Sans just to annoy certain people ..","title":"Publishing to Github and Settling on MkDocs"},{"location":"Digital_Garden_Thoughts/dg3_organizaing_this_space/","text":"Organizing this Space Just jotting down some principles on how and why this is not-a-blog. Rather than organizing chronologically (a web-log), digital gardens rely on curation and revision of ideas that grow over time or get pruned out. People Grow and Change, So Should Ideas. Therefore, anything here might change, move, or be marked as out-of-date. If an idea is worth exploring, the written documentation is worth nurturing over time. Limited Reactive Content. The problem with \"someone is wrong on the internet\" is that someone is always wrong on the internet. Frequently, it's me. Using blogs to talk-back at other blogs often ends up a inside conversation that should be kept to comment boxes or one-on-one conversation. Organize by Topic, Not by Recency. Explore how topics link together rather than create content for content's sake. Use Streams for Quick Takes, Vents, and Reactions. I'm lucky enough to have spaces for sharing quick thoughts, which are better fielded in smaller groups. Index and Curate; Don't Tag. Rather than tag based on what I think might be useful in the future, I can index around evolving themes after the fact. Ideas that already have a place can go into a folder with siblings. Avoid! Comments and metrics.","title":"Organizing this Space"},{"location":"Digital_Garden_Thoughts/dg3_organizaing_this_space/#organizing-this-space","text":"Just jotting down some principles on how and why this is not-a-blog. Rather than organizing chronologically (a web-log), digital gardens rely on curation and revision of ideas that grow over time or get pruned out. People Grow and Change, So Should Ideas. Therefore, anything here might change, move, or be marked as out-of-date. If an idea is worth exploring, the written documentation is worth nurturing over time. Limited Reactive Content. The problem with \"someone is wrong on the internet\" is that someone is always wrong on the internet. Frequently, it's me. Using blogs to talk-back at other blogs often ends up a inside conversation that should be kept to comment boxes or one-on-one conversation. Organize by Topic, Not by Recency. Explore how topics link together rather than create content for content's sake. Use Streams for Quick Takes, Vents, and Reactions. I'm lucky enough to have spaces for sharing quick thoughts, which are better fielded in smaller groups. Index and Curate; Don't Tag. Rather than tag based on what I think might be useful in the future, I can index around evolving themes after the fact. Ideas that already have a place can go into a folder with siblings. Avoid! Comments and metrics.","title":"Organizing this Space"},{"location":"Javascript/comparator_functions/","text":"Using a comparator function for complex logic Written for the Ada js-adagrams project. . The assignment involves writing functions for a Scrabble-like game. The game has four tiebreaker conditions: The word with the highest score wins. If two words are tied, pick a word that uses 10 characters. If neither word has 10 characters, pick a word that's the shortest. If all tiebreakers fail, pick the first submitted. Comparator functions/expressions in Javascript return negative, zero, or positive to determine the order of two values in a list. We chain multiple comparator expressions using or to create multi-category sorts. Not the most efficient way, will probably refactor later using a max algorithm rather than a sort algorithm. const tenLetterTieBreaker = (a, b) => { /* the comparator function for sort needs to return negative, positive, or zero. Assign a fake score to a and b, if either or both are 10 characters in length. Returns zero if: 1. Both words are < 10 characters. 2. Both words are 10 characters. */ const aScore = a.length == 10 ? 100 : 0; const bScore = b.length == 10 ? 100 : 0; // bump the higher value to the front of // the list. return bScore - aScore; }; export const highestScoreFrom = (words) => { const sortedWords = words.sort((a, b) => { return ( // try to sort by score first. scoreWord(b) - scoreWord(a) || // if scores are equal check the tenLetterTieBreaker. tenLetterTieBreaker(a, b) || // if there's no 10 letter tiebreaker, favor the shortest. a.length - b.length // and if everything is equal, sort should be stable // (I'm grateful for that.) ); }); return { word: sortedWords[0], score: scoreWord(sortedWords[0]) }; };","title":"Using a comparator function for complex logic"},{"location":"Javascript/comparator_functions/#using-a-comparator-function-for-complex-logic","text":"Written for the Ada js-adagrams project. . The assignment involves writing functions for a Scrabble-like game. The game has four tiebreaker conditions: The word with the highest score wins. If two words are tied, pick a word that uses 10 characters. If neither word has 10 characters, pick a word that's the shortest. If all tiebreakers fail, pick the first submitted. Comparator functions/expressions in Javascript return negative, zero, or positive to determine the order of two values in a list. We chain multiple comparator expressions using or to create multi-category sorts. Not the most efficient way, will probably refactor later using a max algorithm rather than a sort algorithm. const tenLetterTieBreaker = (a, b) => { /* the comparator function for sort needs to return negative, positive, or zero. Assign a fake score to a and b, if either or both are 10 characters in length. Returns zero if: 1. Both words are < 10 characters. 2. Both words are 10 characters. */ const aScore = a.length == 10 ? 100 : 0; const bScore = b.length == 10 ? 100 : 0; // bump the higher value to the front of // the list. return bScore - aScore; }; export const highestScoreFrom = (words) => { const sortedWords = words.sort((a, b) => { return ( // try to sort by score first. scoreWord(b) - scoreWord(a) || // if scores are equal check the tenLetterTieBreaker. tenLetterTieBreaker(a, b) || // if there's no 10 letter tiebreaker, favor the shortest. a.length - b.length // and if everything is equal, sort should be stable // (I'm grateful for that.) ); }); return { word: sortedWords[0], score: scoreWord(sortedWords[0]) }; };","title":"Using a comparator function for complex logic"},{"location":"Javascript/jest_testing_notes/","text":"Jest testing notes Use async/await to handle events and rendered results in react. test('edit form triggers setter function', async () => { const setter = jest.fn(); render(<PageHeading pageHeadingState=\"Hello, World!\" setter={setter} />); const hiddenInput = screen.getByTestId('headerEdit'); await fireEvent.keyDown(hiddenInput, { key: 'Enter', code: 'Enter', charCode: 13, }); expect(setter).toHaveBeenCalledTimes(1); }); React Idioms // test if rendered object has two nodes matching id expect(await screen.findAllByTestId('WorldTimeEdit')).toHaveLength(2); // test if callback function is called const setter = jest.fn(); expect(setter).toHaveBeenCalledTimes(1); // test if object has class expect(hiddenInput).toHaveClass('state-display'); // test for text display expect(screen.getByText('Hello, World!')).toBeInTheDocument(); // regex expect(screen.getByText(/Eastern/)).toBeInTheDocument(); Links Testing local storage with testing library","title":"Jest testing notes"},{"location":"Javascript/jest_testing_notes/#jest-testing-notes","text":"","title":"Jest testing notes"},{"location":"Javascript/jest_testing_notes/#use-asyncawait-to-handle-events-and-rendered-results-in-react","text":"test('edit form triggers setter function', async () => { const setter = jest.fn(); render(<PageHeading pageHeadingState=\"Hello, World!\" setter={setter} />); const hiddenInput = screen.getByTestId('headerEdit'); await fireEvent.keyDown(hiddenInput, { key: 'Enter', code: 'Enter', charCode: 13, }); expect(setter).toHaveBeenCalledTimes(1); });","title":"Use async/await to handle events and rendered results in react."},{"location":"Javascript/jest_testing_notes/#react-idioms","text":"// test if rendered object has two nodes matching id expect(await screen.findAllByTestId('WorldTimeEdit')).toHaveLength(2); // test if callback function is called const setter = jest.fn(); expect(setter).toHaveBeenCalledTimes(1); // test if object has class expect(hiddenInput).toHaveClass('state-display'); // test for text display expect(screen.getByText('Hello, World!')).toBeInTheDocument(); // regex expect(screen.getByText(/Eastern/)).toBeInTheDocument();","title":"React Idioms"},{"location":"Javascript/jest_testing_notes/#links","text":"Testing local storage with testing library","title":"Links"},{"location":"Javascript/map_mutate/","text":"JavaScript helpers for modifying lists JavaScript helpers for modifying lists for use with React. Both return a new list for triggering setState functions. // Deletes items from task list matching id. const deleteTaskById = function (taskList, id) { return taskList.filter((task) => task.id !== id); }; // Changes list elements matching predicateFunc using mutatorFunc const mapWhen = function (li, predicateFunc, mutatorFunc) { return li.map((element) => { if (predicateFunc(element)) { return mutatorFunc(element); } else { return element; } }); };","title":"JavaScript helpers for modifying lists"},{"location":"Javascript/map_mutate/#javascript-helpers-for-modifying-lists","text":"JavaScript helpers for modifying lists for use with React. Both return a new list for triggering setState functions. // Deletes items from task list matching id. const deleteTaskById = function (taskList, id) { return taskList.filter((task) => task.id !== id); }; // Changes list elements matching predicateFunc using mutatorFunc const mapWhen = function (li, predicateFunc, mutatorFunc) { return li.map((element) => { if (predicateFunc(element)) { return mutatorFunc(element); } else { return element; } }); };","title":"JavaScript helpers for modifying lists"},{"location":"Javascript/yarn_commands/","text":"Yarn Commands Create a new app using the react skeleton. yarn create react-app Run a testing server. yarn start Run all test scripts. yarn test","title":"Yarn Commands"},{"location":"Javascript/yarn_commands/#yarn-commands","text":"Create a new app using the react skeleton. yarn create react-app Run a testing server. yarn start Run all test scripts. yarn test","title":"Yarn Commands"},{"location":"Overthinking_Media/supergiant_nona_lee/","text":"Supergiant Games, Yoon Ha Lee, and Nona the Ninth Spoilers for Bastion , Transistor , and Pyre. When literary historians look back on this era, I know they\u2019re going to say that Sally Rooney and Ottessa Moshfegh described a lot of how it was, and that the Marvel Cinematic Universe and Pixar described how we wanted things to be. But I hope they know that Tamsyn Muir\u2019s The Locked Tomb series describes how it feels. To be alive right now feels brutal, insane, complicated, tragic, and hilarious, and we are all of us so acutely aware of everything falling to pieces around us. -- Christina Ladd @ Strange Horizons And sometimes I read books that are \"mean, cynical, hopeless,\" dark, dystopian, books about awful things and awful people, because I am depressed. Certainly that's why I write books that are \"mean, cynical, hopeless,\" that are full of extreme gore and slaughter, that have characters who paraglide past their moral event horizons. I read those books because when I am depressed and everything feels terrible, those books make me feel seen. I'm sure people vary, but when I am sunk in depression, the LAST thing I want to do is read hopepunk or cozy fantasy. It reminds me that I am failing to \"just cheer up.\" This isn't a fault in those genres, and it doesn't mean those genres shouldn't exist; but when I'm depressed, those genres are not for me. -- Yoon Ha Lee @ his personal newsletter Both of these came to me the same week as The Hades II trailer , which is the first time I've been excited by a game trailer in a long time. Most of my focus over the last year has been on LGBTQ indie gaming and visual novels, and I feel like I'm aging out of twitchy stuff. Disclaimer: Unfortunately I've not finished Hades yet, but will probably go back and do the whole thing in God mode just for Jen Zee, Logan Cunningham, and Darren Korb. In my view, Bastion, Transistor, and Pyre are all apocalyptic games. Bastion starts with The Boy waking up after the apocalypse with a handful of survivors. Transistor puts Red and her companion at the center of a digital zombie apocalypse. Pyre fits in with the theme with The Reader guiding events that result in a revolution where an old, corrupt civilization is changed. There's a point in the Bastion and Transistor where I realize that things just can't be fixed, and the protagonist is faced with the choice to accept loss and break the cycle, or repeat dystopian events with an apocalyptic outcome. Transistor hits me the hardest, every single time. Pyre arguably has a \"happy for now\" ending, but you can't save everyone. And sometimes you just need a game or novel where the best you can do is just one more day.","title":"Supergiant Games, Yoon Ha Lee, and Nona the Ninth"},{"location":"Overthinking_Media/supergiant_nona_lee/#supergiant-games-yoon-ha-lee-and-nona-the-ninth","text":"Spoilers for Bastion , Transistor , and Pyre. When literary historians look back on this era, I know they\u2019re going to say that Sally Rooney and Ottessa Moshfegh described a lot of how it was, and that the Marvel Cinematic Universe and Pixar described how we wanted things to be. But I hope they know that Tamsyn Muir\u2019s The Locked Tomb series describes how it feels. To be alive right now feels brutal, insane, complicated, tragic, and hilarious, and we are all of us so acutely aware of everything falling to pieces around us. -- Christina Ladd @ Strange Horizons And sometimes I read books that are \"mean, cynical, hopeless,\" dark, dystopian, books about awful things and awful people, because I am depressed. Certainly that's why I write books that are \"mean, cynical, hopeless,\" that are full of extreme gore and slaughter, that have characters who paraglide past their moral event horizons. I read those books because when I am depressed and everything feels terrible, those books make me feel seen. I'm sure people vary, but when I am sunk in depression, the LAST thing I want to do is read hopepunk or cozy fantasy. It reminds me that I am failing to \"just cheer up.\" This isn't a fault in those genres, and it doesn't mean those genres shouldn't exist; but when I'm depressed, those genres are not for me. -- Yoon Ha Lee @ his personal newsletter Both of these came to me the same week as The Hades II trailer , which is the first time I've been excited by a game trailer in a long time. Most of my focus over the last year has been on LGBTQ indie gaming and visual novels, and I feel like I'm aging out of twitchy stuff. Disclaimer: Unfortunately I've not finished Hades yet, but will probably go back and do the whole thing in God mode just for Jen Zee, Logan Cunningham, and Darren Korb. In my view, Bastion, Transistor, and Pyre are all apocalyptic games. Bastion starts with The Boy waking up after the apocalypse with a handful of survivors. Transistor puts Red and her companion at the center of a digital zombie apocalypse. Pyre fits in with the theme with The Reader guiding events that result in a revolution where an old, corrupt civilization is changed. There's a point in the Bastion and Transistor where I realize that things just can't be fixed, and the protagonist is faced with the choice to accept loss and break the cycle, or repeat dystopian events with an apocalyptic outcome. Transistor hits me the hardest, every single time. Pyre arguably has a \"happy for now\" ending, but you can't save everyone. And sometimes you just need a game or novel where the best you can do is just one more day.","title":"Supergiant Games, Yoon Ha Lee, and Nona the Ninth"},{"location":"Python/advent_of_code_2022_1/","text":"Advent of Code 2022, Days 1-5 Using Advent of Code 2022 for daily programming exercises. My solutions are currently on a gist . It probably won't be updated on a daily basis, and I'm not committing to doing all of the problems in a timely manner.","title":"Advent of Code 2022, Days 1-5"},{"location":"Python/advent_of_code_2022_1/#advent-of-code-2022-days-1-5","text":"Using Advent of Code 2022 for daily programming exercises. My solutions are currently on a gist . It probably won't be updated on a daily basis, and I'm not committing to doing all of the problems in a timely manner.","title":"Advent of Code 2022, Days 1-5"},{"location":"Python/slack-api/","text":"Python/Slack-API Slack API Example Written for: Ada task list project import requests import dotenv import os from flask import jsonify dotenv.load_dotenv() def slackbot_post(text): \"\"\" Post text to slack return tuple with status and returned fields from slack. \"\"\" # REVIEW: Make asynch? # DONE: setup error checking for environ import. auth_token = \"Bearer \" + str(os.environ.get(\"SLACKBOT_TOKEN\")) channel = os.environ.get(\"SLACKBOT_CHANNEL\") endpoint = os.environ.get(\"SLACKBOT_ENDPOINT\") if not (auth_token and channel and endpoint): return (False, {\"ok\": False, \"message\": \"Slackbot disabled for testing.\"}) # hack to avoid spamming slack during development. # PONY figure out way to set up dummy request/response objects. testing = os.environ.get(\"SLACKBOT_DISABLED\") if testing == \"YES\": return (False, {\"ok\": False, \"message\": \"Slackbot disabled for testing.\"}) request_body = {\"channel\": channel, \"text\": text} headers = {\"Authorization\": auth_token, \"Content-Type\": \"application/json\"} response = requests.post(endpoint, json=request_body, headers=headers) # throw a more helpful exception if the request fails # if requests.get fails, bad data can get passed # downstream. if response.status_code != 200: raise requests.HTTPError(f\"{response.status_code}: {response.reason}\") # return the formatted data response_data = response.json() response_status = response_data.get(\"ok\", False) return (response_status, response_data)","title":"Python/Slack-API"},{"location":"Python/slack-api/#pythonslack-api","text":"","title":"Python/Slack-API"},{"location":"Python/slack-api/#slack-api-example","text":"Written for: Ada task list project import requests import dotenv import os from flask import jsonify dotenv.load_dotenv() def slackbot_post(text): \"\"\" Post text to slack return tuple with status and returned fields from slack. \"\"\" # REVIEW: Make asynch? # DONE: setup error checking for environ import. auth_token = \"Bearer \" + str(os.environ.get(\"SLACKBOT_TOKEN\")) channel = os.environ.get(\"SLACKBOT_CHANNEL\") endpoint = os.environ.get(\"SLACKBOT_ENDPOINT\") if not (auth_token and channel and endpoint): return (False, {\"ok\": False, \"message\": \"Slackbot disabled for testing.\"}) # hack to avoid spamming slack during development. # PONY figure out way to set up dummy request/response objects. testing = os.environ.get(\"SLACKBOT_DISABLED\") if testing == \"YES\": return (False, {\"ok\": False, \"message\": \"Slackbot disabled for testing.\"}) request_body = {\"channel\": channel, \"text\": text} headers = {\"Authorization\": auth_token, \"Content-Type\": \"application/json\"} response = requests.post(endpoint, json=request_body, headers=headers) # throw a more helpful exception if the request fails # if requests.get fails, bad data can get passed # downstream. if response.status_code != 200: raise requests.HTTPError(f\"{response.status_code}: {response.reason}\") # return the formatted data response_data = response.json() response_status = response_data.get(\"ok\", False) return (response_status, response_data)","title":"Slack API Example"},{"location":"Python/sqlalchemy-one-to-many/","text":"SQL Alchemy One-to-Many Written for: Ada task list project One-to-many relationship. Parent class Goal(db.Model): id = db.Column(db.Integer, primary_key=True, autoincrement=True) title = db.Column(db.String, nullable=False) # one to many tasks = db.relationship(\"Task\", back_populates=\"goal\") Child class Task(db.Model): id = db.Column(db.Integer, primary_key=True, autoincrement=True) title = db.Column(db.String, nullable=False) description = db.Column(db.String) completed_at = db.Column(db.DateTime) # many to one goal_id = db.Column(db.Integer, db.ForeignKey(\"goal.id\")) goal = db.relationship(\"Goal\", back_populates=\"tasks\")","title":"SQL Alchemy One-to-Many"},{"location":"Python/sqlalchemy-one-to-many/#sql-alchemy-one-to-many","text":"Written for: Ada task list project One-to-many relationship.","title":"SQL Alchemy One-to-Many"},{"location":"Python/sqlalchemy-one-to-many/#parent","text":"class Goal(db.Model): id = db.Column(db.Integer, primary_key=True, autoincrement=True) title = db.Column(db.String, nullable=False) # one to many tasks = db.relationship(\"Task\", back_populates=\"goal\")","title":"Parent"},{"location":"Python/sqlalchemy-one-to-many/#child","text":"class Task(db.Model): id = db.Column(db.Integer, primary_key=True, autoincrement=True) title = db.Column(db.String, nullable=False) description = db.Column(db.String) completed_at = db.Column(db.DateTime) # many to one goal_id = db.Column(db.Integer, db.ForeignKey(\"goal.id\")) goal = db.relationship(\"Goal\", back_populates=\"tasks\")","title":"Child"},{"location":"Shell/heroku/","text":"Workflow for creating heroku app hobby-dev might be outdated with recent service changes. source venv/bin/activate pip install gunicorn pip freeze > requirements.txt touch Procfile heroku login heroku create kaes-task-list-api git remote -v git status git push heroku master:main heroku addons:create heroku-postgresql:hobby-dev heroku run flask db upgrade","title":"Workflow for creating heroku app"},{"location":"Shell/heroku/#workflow-for-creating-heroku-app","text":"hobby-dev might be outdated with recent service changes. source venv/bin/activate pip install gunicorn pip freeze > requirements.txt touch Procfile heroku login heroku create kaes-task-list-api git remote -v git status git push heroku master:main heroku addons:create heroku-postgresql:hobby-dev heroku run flask db upgrade","title":"Workflow for creating heroku app"},{"location":"Software_Design_Notes/2022-11-18-markdown-and-resume-ontology/","text":"Markdown to Resume? Confusion 21 December 2022 I found a workable solution using the John Bookma pandoc templates. 18 November 2022 Something I'm spinning my wheels on is the idea of creating a web-based resume. I'm a bit of a fan of write-once push-many and WYTIWYM (what you type is what you mean). But a problem is that as much as we'd like to pretend, the sections and subsections don't really match up to what is provided by vanilla html, and especially markdown. Should employment location and date be formatted differently? Then you have sections that are just lists of words. I tried out the Pelican resume template, which puts all the content in the python config file. I have my own fork pelican resume which modified some behavior and will rearrange some items. 100 ways to create blog, and a handful of ways to create a digital garden.","title":"Markdown to Resume? Confusion"},{"location":"Software_Design_Notes/2022-11-18-markdown-and-resume-ontology/#markdown-to-resume-confusion","text":"","title":"Markdown to Resume? Confusion"},{"location":"Software_Design_Notes/2022-11-18-markdown-and-resume-ontology/#21-december-2022","text":"I found a workable solution using the John Bookma pandoc templates.","title":"21 December 2022"},{"location":"Software_Design_Notes/2022-11-18-markdown-and-resume-ontology/#18-november-2022","text":"Something I'm spinning my wheels on is the idea of creating a web-based resume. I'm a bit of a fan of write-once push-many and WYTIWYM (what you type is what you mean). But a problem is that as much as we'd like to pretend, the sections and subsections don't really match up to what is provided by vanilla html, and especially markdown. Should employment location and date be formatted differently? Then you have sections that are just lists of words. I tried out the Pelican resume template, which puts all the content in the python config file. I have my own fork pelican resume which modified some behavior and will rearrange some items. 100 ways to create blog, and a handful of ways to create a digital garden.","title":"18 November 2022"}]}