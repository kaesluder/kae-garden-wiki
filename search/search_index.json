{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"README Collections of snippets, thoughts, and junk. If you're unfamiliar with the concept of a digital garden, Organizing This Space might be helpful. Highlights Recent and recommended... Python Python Slack Example SQLAlchemy One-to-Many Shell Scripts and Similar Heroku Setup Clojure Figwheel build with cli tools News and Current Developments Some thoughts on implementing a digital garden that explains some of the ideas behind this space. Personal Project This week: exploring JavaScript.","title":"README"},{"location":"#readme","text":"Collections of snippets, thoughts, and junk. If you're unfamiliar with the concept of a digital garden, Organizing This Space might be helpful.","title":"README"},{"location":"#highlights","text":"Recent and recommended...","title":"Highlights"},{"location":"#python","text":"Python Slack Example SQLAlchemy One-to-Many","title":"Python"},{"location":"#shell-scripts-and-similar","text":"Heroku Setup","title":"Shell Scripts and Similar"},{"location":"#clojure","text":"Figwheel build with cli tools","title":"Clojure"},{"location":"#news-and-current-developments","text":"Some thoughts on implementing a digital garden that explains some of the ideas behind this space. Personal Project This week: exploring JavaScript.","title":"News and Current Developments"},{"location":"Clojure/clojure-vscode-debugging/","text":"Debugging clojure in VS Code Calva Instrument functions for debugging with ctrl+alt+c i Instrument a function manually with #dbg (as opposed to the above command) Set individual breakpoints with #break Other Tools Clojure observability tools","title":"Debugging clojure in VS Code"},{"location":"Clojure/clojure-vscode-debugging/#debugging-clojure-in-vs-code","text":"","title":"Debugging clojure in VS Code"},{"location":"Clojure/clojure-vscode-debugging/#calva","text":"Instrument functions for debugging with ctrl+alt+c i Instrument a function manually with #dbg (as opposed to the above command) Set individual breakpoints with #break","title":"Calva"},{"location":"Clojure/clojure-vscode-debugging/#other-tools","text":"Clojure observability tools","title":"Other Tools"},{"location":"Clojure/figwheel-cli-tools-setup/","text":"Working Figwheel Setup Running clojure -m figwheel.main --build dev --repl # or clojure -M:fig -b dev -r deps.edn {:deps {org.clojure/clojure {:mvn/version \"1.9.0\"} org.clojure/clojurescript {:mvn/version \"1.10.773\"} com.bhauman/figwheel-main {:mvn/version \"0.2.18\"} ;; optional but recommended com.bhauman/rebel-readline-cljs {:mvn/version \"0.1.4\"}} :aliases {:fig {:main-opts [\"-m\" \"figwheel.main\"]}}} dev.cljs.edn Defines the main function for a build. ^{:extra-main-files {:testing {:main example.test-runner}}} {:main example.core} figwheel.edn {:watch-dirs [\"src\" \"test\"] :css-dirs [\"resources/public/css\"] :auto-testing true} test runner ;; This test runner is intended to be run from the command line (ns intentional-startpage.test-runner (:require [cljs-test-display.core] [cljs.test :refer-macros [run-tests]] ;; require all the namespaces that have tests in them [intentional-startpage.core-test] [intentional-startpage.weather-test])) (run-tests (cljs-test-display.core/init! \"app\") 'intentional-startpage.core-test 'intentional-startpage.weather-test) Local Help clj -M:fig -h Auto testing URL: http://localhost:9500/figwheel-extra-main/auto-testing Source: figwheel docs: Testing . Source: figwheel docs: Installation","title":"Working Figwheel Setup"},{"location":"Clojure/figwheel-cli-tools-setup/#working-figwheel-setup","text":"","title":"Working Figwheel Setup"},{"location":"Clojure/figwheel-cli-tools-setup/#running","text":"clojure -m figwheel.main --build dev --repl # or clojure -M:fig -b dev -r","title":"Running"},{"location":"Clojure/figwheel-cli-tools-setup/#depsedn","text":"{:deps {org.clojure/clojure {:mvn/version \"1.9.0\"} org.clojure/clojurescript {:mvn/version \"1.10.773\"} com.bhauman/figwheel-main {:mvn/version \"0.2.18\"} ;; optional but recommended com.bhauman/rebel-readline-cljs {:mvn/version \"0.1.4\"}} :aliases {:fig {:main-opts [\"-m\" \"figwheel.main\"]}}}","title":"deps.edn"},{"location":"Clojure/figwheel-cli-tools-setup/#devcljsedn","text":"Defines the main function for a build. ^{:extra-main-files {:testing {:main example.test-runner}}} {:main example.core}","title":"dev.cljs.edn"},{"location":"Clojure/figwheel-cli-tools-setup/#figwheeledn","text":"{:watch-dirs [\"src\" \"test\"] :css-dirs [\"resources/public/css\"] :auto-testing true}","title":"figwheel.edn"},{"location":"Clojure/figwheel-cli-tools-setup/#test-runner","text":";; This test runner is intended to be run from the command line (ns intentional-startpage.test-runner (:require [cljs-test-display.core] [cljs.test :refer-macros [run-tests]] ;; require all the namespaces that have tests in them [intentional-startpage.core-test] [intentional-startpage.weather-test])) (run-tests (cljs-test-display.core/init! \"app\") 'intentional-startpage.core-test 'intentional-startpage.weather-test)","title":"test runner"},{"location":"Clojure/figwheel-cli-tools-setup/#local-help","text":"clj -M:fig -h Auto testing URL: http://localhost:9500/figwheel-extra-main/auto-testing Source: figwheel docs: Testing . Source: figwheel docs: Installation","title":"Local Help"},{"location":"Clojure/map-reduce-notes/","text":"Clojure map and reduce notes Map (map hash-map list) can take a hash-map rather than a function and will return all items translated by the hash-map.","title":"Clojure map and reduce notes"},{"location":"Clojure/map-reduce-notes/#clojure-map-and-reduce-notes","text":"","title":"Clojure map and reduce notes"},{"location":"Clojure/map-reduce-notes/#map","text":"(map hash-map list) can take a hash-map rather than a function and will return all items translated by the hash-map.","title":"Map"},{"location":"Digital_Garden_Thoughts/dg1-digita-garden-notes/","text":"Digital Garden Design and Implementation Notes The Technical Spent a day evaluating ways to share my garden beyond giving people a link to the github repo (which is still on the table BTW). There's a class of software that translates markdown-html while providing indexes, styling, and everything else we expect from a \"modern\" personal web site. After trying out Pelican , hugo , zola , and mkDocs , I ended up with mkDocs. Which makes my brain look like an open-source project, and I guess it is. The primary technical annoyance is that most of my note-taking and note-reading happens in the editor. So preserving folder structure and ability to follow links in-editor were both important. Pelican converts folder hierarchies into category tags. Both hugo and zola required additional work to get into deep trees. mkDocs respected folder hierarchy and gave me what I was about to create for myself with three lines of config: site_name: My Mental Rummage Sale site_url: https://example.com/ theme: readthedocs Philosophical A lot of this is converging on Tom Critchlow's ideas regarding gardens, streams, and campfires . Some of the problems with the design of social media include: Unmoderated spaces tend to favor the loudest and most aggressive voices. This is an effect we've studied since the 90s. Conversely, \"hot takes\" get more views, which in turn get more boosts. Social pressure to perform on a daily or weekly basis. The relationship between ephemera and creative work gets inverted. We archive ephemeral ideas for decades while more reflective work gets buried and lost. I have a bit of bias here. I'm a recovering social media addict, so I need to be extremely careful about how and what I post online. The problem with \"someone's wrong on the internet\" rage is that someone is always wrong on the internet. And it's easy to get stuck fighting the same arguments online your friends and family have already agreed to disagree on. I had an anonymous blog (in hugo) for years and eventually killed it because while some ideas were good, others made me actively uncomfortable after life changed my perspective. At the same time, I recognize the value of getting work out there, even imperfect work. So anyway, trying out a digital garden where anything can be pruned. Most of it won't be interesting, and the piles of dirt, wheelbarrows, and paving stones are conspicuously visible. People who want more day-to-day stream-like stuff can find me on any of the smaller communities I feel comfortable engaging in. first draft: 2022-11-19","title":"Digital Garden Design and Implementation Notes"},{"location":"Digital_Garden_Thoughts/dg1-digita-garden-notes/#digital-garden-design-and-implementation-notes","text":"","title":"Digital Garden Design and Implementation Notes"},{"location":"Digital_Garden_Thoughts/dg1-digita-garden-notes/#the-technical","text":"Spent a day evaluating ways to share my garden beyond giving people a link to the github repo (which is still on the table BTW). There's a class of software that translates markdown-html while providing indexes, styling, and everything else we expect from a \"modern\" personal web site. After trying out Pelican , hugo , zola , and mkDocs , I ended up with mkDocs. Which makes my brain look like an open-source project, and I guess it is. The primary technical annoyance is that most of my note-taking and note-reading happens in the editor. So preserving folder structure and ability to follow links in-editor were both important. Pelican converts folder hierarchies into category tags. Both hugo and zola required additional work to get into deep trees. mkDocs respected folder hierarchy and gave me what I was about to create for myself with three lines of config: site_name: My Mental Rummage Sale site_url: https://example.com/ theme: readthedocs","title":"The Technical"},{"location":"Digital_Garden_Thoughts/dg1-digita-garden-notes/#philosophical","text":"A lot of this is converging on Tom Critchlow's ideas regarding gardens, streams, and campfires . Some of the problems with the design of social media include: Unmoderated spaces tend to favor the loudest and most aggressive voices. This is an effect we've studied since the 90s. Conversely, \"hot takes\" get more views, which in turn get more boosts. Social pressure to perform on a daily or weekly basis. The relationship between ephemera and creative work gets inverted. We archive ephemeral ideas for decades while more reflective work gets buried and lost. I have a bit of bias here. I'm a recovering social media addict, so I need to be extremely careful about how and what I post online. The problem with \"someone's wrong on the internet\" rage is that someone is always wrong on the internet. And it's easy to get stuck fighting the same arguments online your friends and family have already agreed to disagree on. I had an anonymous blog (in hugo) for years and eventually killed it because while some ideas were good, others made me actively uncomfortable after life changed my perspective. At the same time, I recognize the value of getting work out there, even imperfect work. So anyway, trying out a digital garden where anything can be pruned. Most of it won't be interesting, and the piles of dirt, wheelbarrows, and paving stones are conspicuously visible. People who want more day-to-day stream-like stuff can find me on any of the smaller communities I feel comfortable engaging in. first draft: 2022-11-19","title":"Philosophical"},{"location":"Digital_Garden_Thoughts/dg2_publishing%20to%20github/","text":"Publishing to Github and Settling on MkDocs I spent part of my week working on rolling my own static site builder using clojure stasis . There are lots of things I like about clojure, but I feel like I'm hitting a point where it would be much easier to learn it if I knew a bit more JavaScript or Java. Transfer from lisp/scheme gets more limited when I hit domains where clojure says, \"just use the Java/JavaScript native functions.\" So, I set this up on github pages using MkDocs and Material for MkDocs , more for some add-on features like recording the last-modified (according to git) date. Some rabbit holes for the future include post-hoc keywords rather than a priori tags, and modding the fonts to look a bit less formal. Maybe... I'll rotate in Papyrus or Comic Sans just to annoy certain people ..","title":"Publishing to Github and Settling on MkDocs"},{"location":"Digital_Garden_Thoughts/dg2_publishing%20to%20github/#publishing-to-github-and-settling-on-mkdocs","text":"I spent part of my week working on rolling my own static site builder using clojure stasis . There are lots of things I like about clojure, but I feel like I'm hitting a point where it would be much easier to learn it if I knew a bit more JavaScript or Java. Transfer from lisp/scheme gets more limited when I hit domains where clojure says, \"just use the Java/JavaScript native functions.\" So, I set this up on github pages using MkDocs and Material for MkDocs , more for some add-on features like recording the last-modified (according to git) date. Some rabbit holes for the future include post-hoc keywords rather than a priori tags, and modding the fonts to look a bit less formal. Maybe... I'll rotate in Papyrus or Comic Sans just to annoy certain people ..","title":"Publishing to Github and Settling on MkDocs"},{"location":"Digital_Garden_Thoughts/dg3_organizaing_this_space/","text":"Organizing this Space Just jotting down some principles on how and why this is not-a-blog. Rather than organizing chronologically (a web-log), digital gardens rely on curation and revision of ideas that grow over time or get pruned out. People Grow and Change, So Should Ideas. Therefore, anything here might change, move, or be marked as out-of-date. If an idea is worth exploring, the written documentation is worth nurturing over time. Limited Reactive Content. The problem with \"someone is wrong on the internet\" is that someone is always wrong on the internet. Frequently, it's me. Using blogs to talk-back at other blogs often ends up a inside conversation that should be kept to comment boxes or one-on-one conversation. Organize by Topic, Not by Recency. Explore how topics link together rather than create content for content's sake. Use Streams for Quick Takes, Vents, and Reactions. I'm lucky enough to have spaces for sharing quick thoughts, which are better fielded in smaller groups. Index and Curate; Don't Tag. Rather than tag based on what I think might be useful in the future, I can index around evolving themes after the fact. Ideas that already have a place can go into a folder with siblings. Avoid! Comments and metrics.","title":"Organizing this Space"},{"location":"Digital_Garden_Thoughts/dg3_organizaing_this_space/#organizing-this-space","text":"Just jotting down some principles on how and why this is not-a-blog. Rather than organizing chronologically (a web-log), digital gardens rely on curation and revision of ideas that grow over time or get pruned out. People Grow and Change, So Should Ideas. Therefore, anything here might change, move, or be marked as out-of-date. If an idea is worth exploring, the written documentation is worth nurturing over time. Limited Reactive Content. The problem with \"someone is wrong on the internet\" is that someone is always wrong on the internet. Frequently, it's me. Using blogs to talk-back at other blogs often ends up a inside conversation that should be kept to comment boxes or one-on-one conversation. Organize by Topic, Not by Recency. Explore how topics link together rather than create content for content's sake. Use Streams for Quick Takes, Vents, and Reactions. I'm lucky enough to have spaces for sharing quick thoughts, which are better fielded in smaller groups. Index and Curate; Don't Tag. Rather than tag based on what I think might be useful in the future, I can index around evolving themes after the fact. Ideas that already have a place can go into a folder with siblings. Avoid! Comments and metrics.","title":"Organizing this Space"},{"location":"Python/slack-api/","text":"Python/Slack-API Slack API Example Written for: Ada task list project import requests import dotenv import os from flask import jsonify dotenv.load_dotenv() def slackbot_post(text): \"\"\" Post text to slack return tuple with status and returned fields from slack. \"\"\" # REVIEW: Make asynch? # DONE: setup error checking for environ import. auth_token = \"Bearer \" + str(os.environ.get(\"SLACKBOT_TOKEN\")) channel = os.environ.get(\"SLACKBOT_CHANNEL\") endpoint = os.environ.get(\"SLACKBOT_ENDPOINT\") if not (auth_token and channel and endpoint): return (False, {\"ok\": False, \"message\": \"Slackbot disabled for testing.\"}) # hack to avoid spamming slack during development. # PONY figure out way to set up dummy request/response objects. testing = os.environ.get(\"SLACKBOT_DISABLED\") if testing == \"YES\": return (False, {\"ok\": False, \"message\": \"Slackbot disabled for testing.\"}) request_body = {\"channel\": channel, \"text\": text} headers = {\"Authorization\": auth_token, \"Content-Type\": \"application/json\"} response = requests.post(endpoint, json=request_body, headers=headers) # throw a more helpful exception if the request fails # if requests.get fails, bad data can get passed # downstream. if response.status_code != 200: raise requests.HTTPError(f\"{response.status_code}: {response.reason}\") # return the formatted data response_data = response.json() response_status = response_data.get(\"ok\", False) return (response_status, response_data)","title":"Python/Slack-API"},{"location":"Python/slack-api/#pythonslack-api","text":"","title":"Python/Slack-API"},{"location":"Python/slack-api/#slack-api-example","text":"Written for: Ada task list project import requests import dotenv import os from flask import jsonify dotenv.load_dotenv() def slackbot_post(text): \"\"\" Post text to slack return tuple with status and returned fields from slack. \"\"\" # REVIEW: Make asynch? # DONE: setup error checking for environ import. auth_token = \"Bearer \" + str(os.environ.get(\"SLACKBOT_TOKEN\")) channel = os.environ.get(\"SLACKBOT_CHANNEL\") endpoint = os.environ.get(\"SLACKBOT_ENDPOINT\") if not (auth_token and channel and endpoint): return (False, {\"ok\": False, \"message\": \"Slackbot disabled for testing.\"}) # hack to avoid spamming slack during development. # PONY figure out way to set up dummy request/response objects. testing = os.environ.get(\"SLACKBOT_DISABLED\") if testing == \"YES\": return (False, {\"ok\": False, \"message\": \"Slackbot disabled for testing.\"}) request_body = {\"channel\": channel, \"text\": text} headers = {\"Authorization\": auth_token, \"Content-Type\": \"application/json\"} response = requests.post(endpoint, json=request_body, headers=headers) # throw a more helpful exception if the request fails # if requests.get fails, bad data can get passed # downstream. if response.status_code != 200: raise requests.HTTPError(f\"{response.status_code}: {response.reason}\") # return the formatted data response_data = response.json() response_status = response_data.get(\"ok\", False) return (response_status, response_data)","title":"Slack API Example"},{"location":"Python/sqlalchemy-one-to-many/","text":"SQL Alchemy One-to-Many Written for: Ada task list project One-to-many relationship. Parent class Goal(db.Model): id = db.Column(db.Integer, primary_key=True, autoincrement=True) title = db.Column(db.String, nullable=False) # one to many tasks = db.relationship(\"Task\", back_populates=\"goal\") Child class Task(db.Model): id = db.Column(db.Integer, primary_key=True, autoincrement=True) title = db.Column(db.String, nullable=False) description = db.Column(db.String) completed_at = db.Column(db.DateTime) # many to one goal_id = db.Column(db.Integer, db.ForeignKey(\"goal.id\")) goal = db.relationship(\"Goal\", back_populates=\"tasks\")","title":"SQL Alchemy One-to-Many"},{"location":"Python/sqlalchemy-one-to-many/#sql-alchemy-one-to-many","text":"Written for: Ada task list project One-to-many relationship.","title":"SQL Alchemy One-to-Many"},{"location":"Python/sqlalchemy-one-to-many/#parent","text":"class Goal(db.Model): id = db.Column(db.Integer, primary_key=True, autoincrement=True) title = db.Column(db.String, nullable=False) # one to many tasks = db.relationship(\"Task\", back_populates=\"goal\")","title":"Parent"},{"location":"Python/sqlalchemy-one-to-many/#child","text":"class Task(db.Model): id = db.Column(db.Integer, primary_key=True, autoincrement=True) title = db.Column(db.String, nullable=False) description = db.Column(db.String) completed_at = db.Column(db.DateTime) # many to one goal_id = db.Column(db.Integer, db.ForeignKey(\"goal.id\")) goal = db.relationship(\"Goal\", back_populates=\"tasks\")","title":"Child"},{"location":"Shell/heroku/","text":"Workflow for creating heroku app hobby-dev might be outdated with recent service changes. source venv/bin/activate pip install gunicorn pip freeze > requirements.txt touch Procfile heroku login heroku create kaes-task-list-api git remote -v git status git push heroku master:main heroku addons:create heroku-postgresql:hobby-dev heroku run flask db upgrade","title":"Workflow for creating heroku app"},{"location":"Shell/heroku/#workflow-for-creating-heroku-app","text":"hobby-dev might be outdated with recent service changes. source venv/bin/activate pip install gunicorn pip freeze > requirements.txt touch Procfile heroku login heroku create kaes-task-list-api git remote -v git status git push heroku master:main heroku addons:create heroku-postgresql:hobby-dev heroku run flask db upgrade","title":"Workflow for creating heroku app"},{"location":"Software_Design_Notes/2022-11-18-markdown-and-resume-ontology/","text":"Markdown to Resume? Confusion 18 November 2022 Something I'm spinning my wheels on is the idea of creating a web-based resume. I'm a bit of a fan of write-once push-many and WYTIWYM (what you type is what you mean). But a problem is that as much as we'd like to pretend, the sections and subsections don't really match up to what is provided by vanilla html, and especially markdown. Should employment location and date be formatted differently? Then you have sections that are just lists of words. I tried out the Pelican resume template, which puts all the content in the python config file. I have my own fork pelican resume which modified some behavior and will rearrange some items. 100 ways to create blog, and a handful of ways to create a digital garden.","title":"Markdown to Resume? Confusion"},{"location":"Software_Design_Notes/2022-11-18-markdown-and-resume-ontology/#markdown-to-resume-confusion","text":"","title":"Markdown to Resume? Confusion"},{"location":"Software_Design_Notes/2022-11-18-markdown-and-resume-ontology/#18-november-2022","text":"Something I'm spinning my wheels on is the idea of creating a web-based resume. I'm a bit of a fan of write-once push-many and WYTIWYM (what you type is what you mean). But a problem is that as much as we'd like to pretend, the sections and subsections don't really match up to what is provided by vanilla html, and especially markdown. Should employment location and date be formatted differently? Then you have sections that are just lists of words. I tried out the Pelican resume template, which puts all the content in the python config file. I have my own fork pelican resume which modified some behavior and will rearrange some items. 100 ways to create blog, and a handful of ways to create a digital garden.","title":"18 November 2022"}]}