{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"README","text":"<p>Collections of snippets, thoughts, and junk. If you're unfamiliar with the concept of a digital garden, Organizing This Space might be helpful.</p>"},{"location":"#news-and-current-developments","title":"News and Current Developments","text":"<p>I've been working hard with my internship with Amazon AuthX. Sorry for the sparse updates.</p> <ul> <li>Pascal's Triangle in Java</li> <li>Drama Llama Capstone Postmortem</li> <li>Quotes</li> <li>Ada Capstone project, Drama Llama</li> <li>JavaScript jest and react testing idioms</li> <li>Thoughts on dark(er) themes in fiction</li> <li>Some thoughts on implementing a digital garden that explains some of the ideas behind this space.</li> </ul>"},{"location":"#recent-and-recommended","title":"Recent and recommended...","text":""},{"location":"#java","title":"Java","text":"<ul> <li>Pascal's Triangle in Java</li> </ul>"},{"location":"#javascript","title":"Javascript","text":"<ul> <li>JavaScript <code>mapWhen</code> function.</li> <li>Complex comparator function</li> </ul>"},{"location":"Ada_Capstone_Documentation/Drama_Llama_Postmortem/","title":"Drama Llama: Postmortem","text":"<p>Drama Llama main repo</p> <p></p>"},{"location":"Ada_Capstone_Documentation/Drama_Llama_Postmortem/#the-plan","title":"The Plan","text":"<p>The original goal coming into capstone was to apply Natural Language Processing to the consumption of social media and news feeds. Big technology companies do this routinely to push content to users and encourage doomscrolling. Given the recent changes and political controversies regarding content moderation, I feel it's quite clear that absent and insufficient content curation by big tech shifts the burden to individual users. This isn't a new problem, discussion of filters and killfiles go all the way back to Usenet and early email lists.</p> <p>The original plan involved developing an electron app using typescript to handle both backend and frontend logic. Since RSS feeds are notoriously variable, I was leaning to a NoSQL data store. A typescript/typescript framework can use electron inter-process-communication (IPC) for the data flow.</p> <p>Instead, I ended up doing another flask (python) backend with a javascript frontend. What happened?</p>"},{"location":"Ada_Capstone_Documentation/Drama_Llama_Postmortem/#constraints","title":"Constraints","text":"<p>I had three weeks to bring a project from proposal to a working demo. In addition, we came home the first friday to find water pouring from ceiling vents due to a plumbing disaster from an upstairs neighbor.</p>"},{"location":"Ada_Capstone_Documentation/Drama_Llama_Postmortem/#dealing-with-api-churn","title":"Dealing with API Churn","text":"<p>One problem I ran into repeatedly was having a set of components that tested well individually but refused to compile and run together. Multiple Nodejs NoSQL libraries depend on LevelDB, and I could not get M1 Mac binaries for those libraries. Typescript worked very well up to the point when library functions started delivering custom data types. Some frameworks wanted ESM imports, while others insisted on CommonJS.</p> <p>All of these problems could be fixed with more time and expertise, but I felt that debugging babel and webpack configs was not the best use of the limited learning time I had available.</p> <p></p>"},{"location":"Ada_Capstone_Documentation/Drama_Llama_Postmortem/#did-not-finish-natural-language-processing","title":"Did Not Finish: Natural Language Processing","text":"<p>This will be added to a future version. While python created opportunities to use stronger NLP libraries including NLTK and spaCy, developing the download/view features was necessary to make them useful. In the last few days, I adopted a soft freeze on new features to devote time to improving unit testing and documentation quality.</p>"},{"location":"Ada_Capstone_Documentation/Drama_Llama_Postmortem/#success-hybrid-sqlite-model","title":"Success: Hybrid SQLite Model","text":"<p>Going into the project, I thought that I really needed a NoSQL solution. RSS is both not fully standardized and extendible, while my plans for filter design would involve polymorphism. Unfortunately, NoSQL was another area I couldn't figure out within the time constraints.</p> <p>Eventually, I discovered that SQLite includes SQL extensions for manipulating JSON field data. So I adopted SQLite and used a hybrid model of relational fields for data needed for searching and sorting, and raw JSON data for everything else.</p>"},{"location":"Ada_Capstone_Documentation/Drama_Llama_Postmortem/#success-polymorphic-filters-and-filter-storage","title":"Success: Polymorphic Filters and Filter Storage","text":"<p>I ended up implementing two different filter types. <code>BaseFilter</code> says \"yes\" to everything, while <code>RegexFilter</code> says \"yes\" to posts matching a regex pattern. Each filter is an object that knows how to apply its own criteria to a post, and to communicate what it is to the storage system. Storage is handled by exporting the config to a basic <code>dict()</code> and serializing it in an SQL table.</p>"},{"location":"Ada_Capstone_Documentation/Drama_Llama_Postmortem/#ill-take-it-building-a-desktop-app","title":"I'll Take It: Building a Desktop App","text":"<p>I never got Electron working properly. My javascript skills were not up to writing the different dialects expected of Electron and Reactjs.</p> <p>Electron works by packaging Nodejs with a feature-limited version of Chrome. There are other frameworks implementing the model including Tauri. Eventually, I just went with pywebview which uses a python backend with a webkit front end. A python/webview or rust/webview might be easier on my brain than a nodejs/chromejs framework.</p> <p>Long-term I'm planning on continuing development for personal/hobby use, and I'm comfortable just running it as a microservice on my personal computer.</p>"},{"location":"Ada_Capstone_Documentation/Drama_Llama_Postmortem/#final-thoughts","title":"Final Thoughts","text":"<p>It was a great, frustrating, and intense learning experience. Even though I was using a familiar stack, I had to innovate and push my knowledge on how to implement this project. Some takeaways:</p> <ol> <li>While I'm big on DIY, I don't feel comfortable doing interface design for others on my own.</li> <li>I'd like to put a lot more work into learning build and development tools instead of depending on boilerplate created by others.</li> <li>I'll probably continue this as a personal project, but it looks like my near future is going to be other languages and application areas.</li> </ol> <p>-- 18 February, 2022</p>"},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/","title":"Drama Llama (Working Title) - Kae Job Sluder","text":""},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/#team-members-leave-blank-for-none","title":"Team members (Leave blank for none)","text":"<ul> <li>Document Theme Song [We Don't Need This] Fascist Groove Thang (Extended Mix)</li> </ul>"},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/#problem-statement-1","title":"Problem Statement #1","text":"<p>The problem with someone's wrong on the internet anger is that someone is always wrong on the internet. (Sometimes it's you.)</p> <p>Using the internet requires carefully curating or filtering through abundant low-quality content. Some of the issues include: </p> <ul> <li>Opinion pieces presented as factual news</li> <li>Low-research articles</li> <li>Overgeneralization from hot-takes</li> <li>Self-promotional material</li> <li>Meta-controversy about what someone else said on the internet about something that happened on the internet</li> <li>Explicit prejudice and harassment </li> <li>Context collapse </li> </ul> <p>Attempts by large social media companies to develop a centralized response to biased, inflammatory, and misleading information has become mired in political controversy. On top of that, those responses have become limited by a business model that monetizes user clicks and data about user clicks. Algorithmic views of information reinforce user behavior, especially when user behavior is addictive or compulsive. An evening of \"doomscrolling\" can bias the algorithm  to presenting more of the same content, with trivial differences in information from article to article and post to post. </p> <p>Drama Llama is a curation- and filter-first newsreader. Users can build filters using keyword, regex, and trainable natural language processing (NLP) tools. This app will apply the same strategies used to detect email spam to helping users curate, summarize, and tag individual articles or posts. The user can choose to display this metadata at the headline level or use it to filter views. </p>"},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/#mvp-feature-set","title":"MVP Feature Set","text":"<ol> <li>RSS fetching and viewing<ul> <li>RSS is an XML standard for providing website, article, and post summaries.   While many sites have moved away from RSS, it's still widely used. </li> </ul> </li> <li>Keyword or regex tagging <ul> <li>Simple search on feed content.</li> </ul> </li> <li>Natural Language Processing (NLP) tags<ul> <li>The first prototype will use very basic NLP algorithms such as Sentiment   Analysis, Naive Bayesian Analysis, and/or Logistic Regression to tag text.   These filters can be trained via user curation, and offer reasonable   accuracy without extensive machine learning.  </li> </ul> </li> <li>Desktop app or desktop browser app<ul> <li>I think this will be challenging enough without trying to adapt to small-screen controls.   </li> </ul> </li> <li>Filter wizard<ul> <li>Drama Llama can suggest filters based on common patterns. </li> </ul> </li> </ol>"},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/#potential-additional-features","title":"Potential Additional Features","text":"<ol> <li>Machine Learning tagging using existing models</li> <li>Cross-platform testing</li> <li>Additional API and RSS integration</li> </ol>"},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/#draft-technology-choices","title":"Draft Technology Choices","text":"<ul> <li>Front end: Electron or Browser using localStorage or indexedDB</li> <li>Natural (JS) provides tools for   basic language processing including statistical classification algorithms</li> <li>Multiple machine learning/AI models exist for this kind of thing, more   research is needed</li> <li>SQLite or other embedded data-storage solution</li> <li>JavaScript or Typescript depending on level of support</li> <li>React + css framework. </li> </ul>"},{"location":"Ada_Capstone_Documentation/drama_llama_draft_2022-12-11/#additional-content-diagrams-wireframes-user-flows-etc","title":"Additional content, diagrams, wireframes, user flows, etc.","text":"<p>Early wireframes</p>"},{"location":"Ada_Capstone_Documentation/library_bookmarks/","title":"Capstone library bookmarks","text":""},{"location":"Ada_Capstone_Documentation/library_bookmarks/#modules","title":"Modules","text":"<p>Luxon : Time conversion and pretty-printing.</p> <p>Ramda : Functional utility library.</p> <p>react-markdown : Markdown to react DOM rendering.</p> <p>axios : HTTP client.</p> <p>FeedParser : RSS parsing library.</p> <p>fast-xml-parser : RSS parsing library not dependent on promises.</p> <p>Material UI : prefab controls for react including enhanced tables and tree-list controls.</p> <p>JavaScript bloom filter library : Bloom filter implementations for JS.</p> <p>RSS 2.0 spec from w3c</p> <p>Knex database library for JS</p>"},{"location":"Ada_Capstone_Documentation/library_bookmarks/#setting-up-electron-forge","title":"Setting Up Electron Forge","text":"<ol> <li>Use Electron Forge to set up a new project using the webpack template.</li> <li>Follow React integration instructions.</li> </ol>"},{"location":"Ada_Capstone_Documentation/library_bookmarks/#prior-research","title":"Prior Research","text":"<p>A Large Labeled Corpus for Online Harassment Research : Corpus not available, but used hashtags and twitter to build a corpus of harassing vs. nonharassing messages.</p> <p>Directions in hate speech data collection : Discusses issues with data collection.</p> <p>hatespeechdata.com : Links to hatespeech data collections available on github.</p> <p>introduction to bloom filters : Minimal storage technique for looking up if item is in a set.</p>"},{"location":"Clojure/clojure-vscode-debugging/","title":"Debugging clojure in VS Code","text":""},{"location":"Clojure/clojure-vscode-debugging/#calva","title":"Calva","text":"<ul> <li>Instrument functions for debugging with ctrl+alt+c i</li> <li>Instrument a function manually with #dbg (as opposed to the above command)</li> <li>Set individual breakpoints with #break</li> </ul>"},{"location":"Clojure/clojure-vscode-debugging/#other-tools","title":"Other Tools","text":"<ul> <li>Clojure observability tools</li> </ul>"},{"location":"Clojure/figwheel-cli-tools-setup/","title":"Working Figwheel Setup","text":""},{"location":"Clojure/figwheel-cli-tools-setup/#running","title":"Running","text":"<pre><code>clojure -m figwheel.main --build dev --repl\n# or \nclojure -M:fig -b dev -r\n</code></pre>"},{"location":"Clojure/figwheel-cli-tools-setup/#depsedn","title":"<code>deps.edn</code>","text":"<pre><code>{:deps {org.clojure/clojure {:mvn/version \"1.9.0\"}\n        org.clojure/clojurescript {:mvn/version \"1.10.773\"}\n        com.bhauman/figwheel-main {:mvn/version \"0.2.18\"}\n        ;; optional but recommended     \n        com.bhauman/rebel-readline-cljs {:mvn/version \"0.1.4\"}}\n :aliases {:fig {:main-opts [\"-m\" \"figwheel.main\"]}}}\n</code></pre>"},{"location":"Clojure/figwheel-cli-tools-setup/#devcljsedn","title":"<code>dev.cljs.edn</code>","text":"<p>Defines the <code>main</code> function for a build. </p> <pre><code>^{:extra-main-files {:testing {:main example.test-runner}}}\n{:main example.core}\n</code></pre>"},{"location":"Clojure/figwheel-cli-tools-setup/#figwheeledn","title":"<code>figwheel.edn</code>","text":"<pre><code>{:watch-dirs [\"src\" \"test\"]\n :css-dirs [\"resources/public/css\"]\n :auto-testing true}\n</code></pre>"},{"location":"Clojure/figwheel-cli-tools-setup/#test-runner","title":"test runner","text":"<pre><code>;; This test runner is intended to be run from the command line\n(ns intentional-startpage.test-runner\n  (:require\n   [cljs-test-display.core]\n   [cljs.test :refer-macros [run-tests]]\n    ;; require all the namespaces that have tests in them\n   [intentional-startpage.core-test]\n   [intentional-startpage.weather-test]))\n\n(run-tests (cljs-test-display.core/init! \"app\")\n           'intentional-startpage.core-test\n           'intentional-startpage.weather-test)\n\n</code></pre>"},{"location":"Clojure/figwheel-cli-tools-setup/#local-help","title":"Local Help","text":"<pre><code>clj -M:fig -h\n</code></pre> <p>Auto testing URL: http://localhost:9500/figwheel-extra-main/auto-testing</p> <p>Source: figwheel docs: Testing .  Source: figwheel docs: Installation</p>"},{"location":"Clojure/map-reduce-notes/","title":"Clojure map and reduce notes","text":""},{"location":"Clojure/map-reduce-notes/#map","title":"Map","text":"<p><code>(map hash-map list)</code> can take a hash-map rather than a function and will return all items translated by the hash-map.</p>"},{"location":"Digital_Garden_Thoughts/dg1-digita-garden-notes/","title":"Digital Garden Design and Implementation Notes","text":""},{"location":"Digital_Garden_Thoughts/dg1-digita-garden-notes/#the-technical","title":"The Technical","text":"<p>Spent a day evaluating ways to share my garden beyond giving people a link to the github repo (which is still on the table BTW). There's a class of software that translates markdown-html while providing indexes, styling, and everything else we expect from a \"modern\" personal web site. After trying out Pelican, hugo, zola, and mkDocs, I ended up with mkDocs. Which makes my brain look like an open-source project, and I guess it is.</p> <p>The primary technical annoyance is that most of my note-taking and note-reading happens  in the editor. So preserving folder structure and ability to follow links in-editor  were both important. Pelican converts folder hierarchies into category tags. Both hugo and zola required additional work to get into deep trees. mkDocs respected folder hierarchy and gave me what I was about to create for myself with three lines of config:</p> <pre><code>site_name: My Mental Rummage Sale\nsite_url: https://example.com/\ntheme: readthedocs\n</code></pre>"},{"location":"Digital_Garden_Thoughts/dg1-digita-garden-notes/#philosophical","title":"Philosophical","text":"<p>A lot of this is converging on Tom Critchlow's ideas regarding gardens, streams, and campfires. Some of the  problems with the design of social media include:</p> <ul> <li>Unmoderated spaces tend to favor the loudest and most aggressive voices. This is an effect we've studied since the 90s. </li> <li>Conversely, \"hot takes\" get more views, which in turn get more boosts.</li> <li>Social pressure to perform on a daily or weekly basis. </li> <li>The relationship between ephemera and creative work gets inverted. We archive ephemeral ideas for decades while more reflective work gets buried and lost.</li> </ul> <p>I have a bit of bias here. I'm a recovering social media addict, so I need to be extremely careful about how and what I post online. The problem with \"someone's wrong on the internet\" rage is that someone is always wrong on the internet. And it's easy to get stuck fighting the same arguments online your friends and family have already agreed to disagree on. I had an anonymous blog (in hugo) for years  and eventually killed it because while some ideas were good, others made me  actively uncomfortable after life changed my perspective. </p> <p>At the same time, I recognize the value of getting work out there, even imperfect work. </p> <p>So anyway, trying out a digital garden where anything can be pruned. Most of it won't  be interesting, and the piles of dirt, wheelbarrows, and paving stones are conspicuously visible. People who want more day-to-day stream-like stuff can find me on any of the smaller communities I feel comfortable engaging in. </p> <ul> <li>first draft: 2022-11-19</li> </ul>"},{"location":"Digital_Garden_Thoughts/dg2_publishing%20to%20github/","title":"Publishing to Github and Settling on MkDocs","text":"<p>I spent part of my week working on rolling my own static site builder using clojure stasis. There are lots of things I like about clojure, but I feel like I'm hitting a point where it would be much easier to learn it if I knew a bit more JavaScript or Java. Transfer from lisp/scheme gets more limited when I hit domains where clojure says, \"just use the Java/JavaScript native functions.\"</p> <p>So, I set this up on github pages using MkDocs and Material for MkDocs, more for some add-on features like recording the last-modified (according to git) date. Some rabbit holes for the future include post-hoc keywords rather than a priori tags, and modding the  fonts to look a bit less formal. </p> <p>Maybe... I'll rotate in Papyrus or Comic Sans just to annoy certain people .. </p>"},{"location":"Digital_Garden_Thoughts/dg3_organizaing_this_space/","title":"Organizing this Space","text":"<p>Just jotting down some principles on how and why this is not-a-blog. Rather than organizing chronologically (a web-log), digital gardens rely on curation and revision of ideas that grow over time or get pruned out. </p> <ol> <li>People Grow and Change, So Should Ideas. Therefore, anything here might change, move, or be marked as out-of-date. If an idea is worth exploring, the written documentation is worth nurturing over time. </li> <li>Limited Reactive Content. The problem with \"someone is wrong on the internet\" is that someone is always wrong on the internet. Frequently, it's me. Using blogs to talk-back at other blogs often ends up a inside conversation that should be kept to comment boxes or one-on-one conversation. </li> <li>Organize by Topic, Not by Recency. Explore how topics link together rather than create content for content's sake. </li> <li>Use Streams for Quick Takes, Vents, and Reactions. I'm lucky enough to have spaces for sharing quick thoughts, which are better fielded in smaller groups.</li> <li>Index and Curate; Don't Tag. Rather than tag based on what I think might be useful in the future, I can index around evolving themes after the fact. Ideas that already have a place can go into a folder with siblings. </li> <li>Avoid! Comments and metrics. </li> </ol>"},{"location":"Java/pascals_triangle/","title":"Pascal's Triangle","text":"<p>Naive adaptation of Pascal's Triangle in Java. (New at Java.)</p> <pre><code>\nimport java.util.ArrayList;\n\npublic class Main {\n\n    public static void prettyPrintTriangle(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; triangle) {\n        for (ArrayList&lt;Integer&gt; thisRow : triangle) {\n            System.out.println(thisRow.toString());\n        }\n    }\n\n    public static ArrayList&lt;ArrayList&lt;Integer&gt;&gt; pascalsTriangle(int numRows) {\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; results = new ArrayList&lt;&gt;();\n\n        if (numRows &lt;= 0) {\n            return results;\n        }\n\n        // seed the first row\n        ArrayList&lt;Integer&gt; thisRow = new ArrayList&lt;&gt;();\n        thisRow.add(1);\n        results.add(thisRow);\n\n        for (int i = 1; i &lt; numRows; i++) {\n            thisRow = new ArrayList&lt;&gt;();\n            thisRow.add(0, 1);\n            ArrayList&lt;Integer&gt; prevRow = results.get(i - 1);\n            for (int j = 1; j &lt; i; j++) {\n                thisRow.add(j, (prevRow.get(j - 1) + prevRow.get(j)));\n            }\n            thisRow.add(i, 1);\n            results.add(thisRow);\n        }\n        return results;\n    }\n\n    public static void main(String[] args) {\n        for (int i = 1; i &lt;= 6; i++) {\n            System.out.println(\"=====\");\n            prettyPrintTriangle(pascalsTriangle(i));\n        }\n    }\n}\n\n</code></pre>"},{"location":"Javascript/comparator_functions/","title":"Using a comparator function for complex logic","text":"<p>Written for the Ada js-adagrams project.. </p> <p>The assignment involves writing functions for a Scrabble-like game. The game has four tiebreaker conditions:</p> <ol> <li>The word with the highest score wins.</li> <li>If two words are tied, pick a word that uses 10 characters.</li> <li>If neither word has 10 characters, pick a word that's the shortest.</li> <li>If all tiebreakers fail, pick the first submitted. </li> </ol> <p>Comparator functions/expressions in Javascript return negative, zero, or positive to determine the order of two values in a list. We chain multiple comparator expressions using or to create multi-category sorts. </p> <p>Not the most efficient way, will probably refactor later using a <code>max</code> algorithm rather than a <code>sort</code> algorithm. </p> <pre><code>const tenLetterTieBreaker = (a, b) =&gt; {\n  /* the comparator function for sort needs to \n  return negative, positive, or zero. Assign \n  a fake score to a and b, if either or both are \n  10 characters in length. \n\n  Returns zero if:\n  1. Both words are &lt; 10 characters.\n  2. Both words are 10 characters. */\n  const aScore = a.length == 10 ? 100 : 0;\n  const bScore = b.length == 10 ? 100 : 0;\n\n  // bump the higher value to the front of\n  // the list.\n  return bScore - aScore;\n};\n\nexport const highestScoreFrom = (words) =&gt; {\n  const sortedWords = words.sort((a, b) =&gt; {\n    return (\n      // try to sort by score first.\n      scoreWord(b) - scoreWord(a) ||\n      // if scores are equal check the tenLetterTieBreaker.\n      tenLetterTieBreaker(a, b) ||\n      // if there's no 10 letter tiebreaker, favor the shortest.\n      a.length - b.length\n      // and if everything is equal, sort should be stable\n      // (I'm grateful for that.)\n    );\n  });\n  return { word: sortedWords[0], score: scoreWord(sortedWords[0]) };\n};\n\n</code></pre>"},{"location":"Javascript/filesearcher_js/","title":"filesearcher","text":"<p>I'm working on some learning projects, aka reimplementing stuff that could be done easier by piping a bunch of shell utilities together. A few lessons from DIY sewing:</p> <ol> <li>Give it permission to look weird.</li> <li>No, you're (probably) not going to reach the same level of speed and efficiency as a sweatshop with 300 years of technological automation.</li> <li>Knowing how it works is priceless.</li> </ol> <pre><code>\nimport util from 'node:util'\nimport * as fsWalk from '@nodelib/fs.walk'\n\n// https://www.npmjs.com/package/@nodelib/fs.walk\n\nconst errorFilter = (error) =&gt; error.code === 'EACCES' || 'EPERM'\n\nconst ignoreDirs = [/[.]git[/]/, /[/]node_modules[/]/]\n\n/**\n * Filter predicate to determine if a directory should be\n * ignored or not.\n * @param {fsWalk.Entry} entry Entry to match against.\n * @param {Regexp[]} ignoreDirs List of RegExps to match directories to ignore.\n * @returns {Boolean}\n */\nconst ignore = function (entry, ignoreDirs) {\n  for (let i in ignoreDirs) {\n    let dr = new RegExp(ignoreDirs[i])\n    if (dr.test(entry.path)) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Run a search query and return a list of matching fsWalk entries.\n * @param {String} searchStr Regexp or string to match against target path.\n * @param {String} path Source path from which to start searching.\n * @param {String[]} ignoreDirs List matching dirs to ignore.\n * @returns\n */\nconst runGlob = function (searchStr, path, ignoreDirs) {\n  // todo ramda might make this easier\n  const searchThis = (entry) =&gt; {\n    if (ignore(entry, ignoreDirs)) {\n      return false\n    } else {\n      return true\n    }\n  }\n  const searchReg = new RegExp(searchStr)\n\n  // Transform a function that uses a callback into one that returns a promise.\n  const walk = util.promisify(fsWalk.walk)\n  return walk(path ?? '.', { deepFilter: searchThis, errorFilter: errorFilter }).then((response) =&gt;\n    response.filter((entry) =&gt; searchReg.test(entry.path))\n  )\n}\n\nexport { runGlob, ignore }\n\n</code></pre> <p>Lessons learned:</p> <ol> <li>A large number of my files are ephemera from the development process, so having a way to exclude <code>.git</code>, <code>venv</code>, and <code>node_modules</code> will dramatically cut down the time. (As much as 90%.)</li> <li>I spent way too much time trying to fit that for loop into a ramda expression.</li> <li>I'm having much better luck working with vite compared to webpack/babel.</li> </ol> <p>Things I need to learn:</p> <ol> <li>The concepts under other people's boilerplate.</li> <li>How to test async functionality in jest/vitest.</li> </ol> <p>EDIT: Updated to fix some string-matching and logic errors.</p>"},{"location":"Javascript/jest_testing_notes/","title":"Jest testing notes","text":""},{"location":"Javascript/jest_testing_notes/#use-asyncawait-to-handle-events-and-rendered-results-in-react","title":"Use async/await to handle events and rendered results in react.","text":"<pre><code>\n  test('edit form triggers setter function', async () =&gt; {\n    const setter = jest.fn();\n\n    render(&lt;PageHeading pageHeadingState=\"Hello, World!\" setter={setter} /&gt;);\n    const hiddenInput = screen.getByTestId('headerEdit');\n    await fireEvent.keyDown(hiddenInput, {\n      key: 'Enter',\n      code: 'Enter',\n      charCode: 13,\n    });\n    expect(setter).toHaveBeenCalledTimes(1);\n  });\n\n</code></pre>"},{"location":"Javascript/jest_testing_notes/#react-idioms","title":"React Idioms","text":"<pre><code>// test if rendered object has two nodes matching id\nexpect(await screen.findAllByTestId('WorldTimeEdit')).toHaveLength(2);\n\n// test if callback function is called\nconst setter = jest.fn();\nexpect(setter).toHaveBeenCalledTimes(1);\n\n// test if object has class\nexpect(hiddenInput).toHaveClass('state-display');\n\n// test for text display\nexpect(screen.getByText('Hello, World!')).toBeInTheDocument();\n// regex\nexpect(screen.getByText(/Eastern/)).toBeInTheDocument();\n\n// check that function returns undefined\nexpect(result1).toBeUndefined();\n\n// check object-structure match\nexpect(result1[0]).toMatchObject(newWidget);\n\n\n</code></pre>"},{"location":"Javascript/jest_testing_notes/#links","title":"Links","text":"<ul> <li>Testing local storage with testing library</li> </ul>"},{"location":"Javascript/map_mutate/","title":"JavaScript helpers for modifying lists","text":"<p>JavaScript helpers for modifying lists for use with React. Both  return a new list for triggering setState functions. </p> <pre><code>// Deletes items from task list matching id.\nconst deleteTaskById = function (taskList, id) {\n  return taskList.filter((task) =&gt; task.id !== id);\n};\n\n// Changes list elements matching predicateFunc using mutatorFunc\nconst mapWhen = function (li, predicateFunc, mutatorFunc) {\n  return li.map((element) =&gt; {\n    if (predicateFunc(element)) {\n      return mutatorFunc(element);\n    } else {\n      return element;\n    }\n  });\n};\n</code></pre>"},{"location":"Javascript/yarn_commands/","title":"Yarn Commands","text":"<p>Create a new app using the react skeleton.</p> <pre><code>yarn create react-app\n</code></pre> <p>Run a testing server.</p> <pre><code>yarn start\n</code></pre> <p>Run all test scripts.</p> <pre><code>yarn test\n</code></pre>"},{"location":"Other_Project_Ideas/concept_map_draft_2022-12-11/","title":"Concept Map + Search Proposal - Kae Job Sluder","text":""},{"location":"Other_Project_Ideas/concept_map_draft_2022-12-11/#team-members-leave-blank-for-none","title":"Team members (Leave blank for none)","text":"<ul> <li>Document Theme Song Start Shootin' - Americana Remix</li> </ul>"},{"location":"Other_Project_Ideas/concept_map_draft_2022-12-11/#problem-statement-1","title":"Problem Statement #1","text":"<p>Search engines currently provide minimal scaffolding for focused topic research. This project will reimagine the search interface by:</p> <ol> <li>Providing a meta-search tool that incorporates results from general and specialized search engines. </li> <li>Encouraging the user to construct queries built on complete questions. </li> <li>Keeping track of how questions change through the search process. </li> <li>Encouraging the user to evaluate search results and add them to a growing concept map. </li> </ol>"},{"location":"Other_Project_Ideas/concept_map_draft_2022-12-11/#mvp-feature-set","title":"MVP Feature Set","text":"<ol> <li>Feature<ul> <li>More info on feature</li> </ul> </li> </ol>"},{"location":"Other_Project_Ideas/concept_map_draft_2022-12-11/#potential-additional-features","title":"Potential Additional Features","text":"<ol> <li>additional feature</li> </ol>"},{"location":"Other_Project_Ideas/concept_map_draft_2022-12-11/#draft-technology-choices","title":"Draft Technology Choices","text":"<ul> <li>Front end: Electron or Browser using local storage</li> </ul>"},{"location":"Other_Project_Ideas/concept_map_draft_2022-12-11/#additional-content-diagrams-wireframes-user-flows-etc","title":"Additional content, diagrams, wireframes, user flows, etc.","text":"<p>Link, attach, or insert any additional content here.</p>"},{"location":"Overthinking_Media/Quotes/","title":"Meaningful Quotes","text":"<p>Now, up to now my plan went all right Until we tried to put it all together one night And that's when we noticed that something was definitely wrong The transmission was a '53 And the motor turned out to be a '73 And when we tried to put in the bolts all the holes were gone So we drilled it out so that it would fit And with a little bit of help from an a-daptor kit We had that engine running just like a song</p> <p>-- Johnny Cash, \"One Piece at a Time\"</p> <p>Machoman is afraid of our terms, which are not all rational, positive, competitive, etc. And so he has taught us to despise and deny them. In our society, women have lived, and have been despised for living, the whole side of life that includes and takes responsibility for helplessness, weakness, and illness, for the irrational and the irreparable, for all that is obscure, passive, uncontrolled, animal, unclean \u2014 the valley of the shadow, the deep, the depths of life. All that the Warrior denies and refuses is left to us and the men who share it with us and therefore, like us, can\u2019t play doctor, only nurse, can\u2019t be warriors, only civilians, can\u2019t be chiefs, only indians. Well so that is our country. The night side of our country. If there is a day side to it, high sierras, prairies of bright grass, we only know pioneers\u2019 tales about it, we haven\u2019t got there yet. We\u2019re never going to get there by imitating Machoman. We are only going to get there by going our own way, by living there, by living through the night in our own country.</p> <p>So what I hope for you is that you live there not as prisoners, ashamed of being women, consenting captives of a psychopathic social system, but as natives. That you will be at home there, keep house there, be your own mistress, with a room of your own. That you will do your work there, whatever you\u2019re good at, art or science or tech or running a company or sweeping under the beds, and when they tell you that it\u2019s second-class work because a woman is doing it, I hope you tell them to go to hell and while they\u2019re going to give you equal pay for equal time. I hope you live without the need to dominate, and without the need to be dominated. I hope you are never victims, but I hope you have no power over other people. And when you fail, and are defeated, and in pain, and in the dark, then I hope you will remember that darkness is your country, where you live, where no wars are fought and no wars are won, but where the future is. Our roots are in the dark; the earth is our country. Why did we look up for blessing \u2014 instead of around, and down? What hope we have lies there. Not in the sky full of orbiting spy-eyes and weaponry, but in the earth we have looked down upon. Not from above, but from below. Not in the light that blinds, but in the dark that nourishes, where human beings grow human souls.</p> <p>-- Le Guin</p>"},{"location":"Overthinking_Media/supergiant_nona_lee/","title":"Supergiant Games, Yoon Ha Lee, and Nona the Ninth","text":"<p>Spoilers for Bastion, Transistor, and Pyre.</p> <p>When literary historians look back on this era, I know they\u2019re going to say that Sally Rooney and Ottessa Moshfegh described a lot of how it was, and that the Marvel Cinematic Universe and Pixar described how we wanted things to be. But I hope they know that Tamsyn Muir\u2019s The Locked Tomb series describes how it feels. To be alive right now feels brutal, insane, complicated, tragic, and hilarious, and we are all of us so acutely aware of everything falling to pieces around us.</p> <p>-- Christina Ladd @ Strange Horizons</p> <p>And sometimes I read books that are \"mean, cynical, hopeless,\" dark, dystopian, books about awful things and awful people, because I am depressed. Certainly that's why I write books that are \"mean, cynical, hopeless,\" that are full of extreme gore and slaughter, that have characters who paraglide past their moral event horizons. I read those books because when I am depressed and everything feels terrible, those books make me feel seen. I'm sure people vary, but when I am sunk in depression, the LAST thing I want to do is read hopepunk or cozy fantasy. It reminds me that I am failing to \"just cheer up.\" This isn't a fault in those genres, and it doesn't mean those genres shouldn't exist; but when I'm depressed, those genres are not for me.</p> <p>-- Yoon Ha Lee @ his personal newsletter</p> <p>Both of these came to me the same week as The Hades II trailer, which is the first time I've been excited by a game trailer in a long time. Most of my focus over the last year has been on LGBTQ indie gaming and visual novels, and I feel like I'm aging out of twitchy stuff. Disclaimer: Unfortunately I've not finished Hades yet, but will probably go back and do the whole thing in God mode just for Jen Zee, Logan Cunningham, and Darren Korb. </p> <p>In my view, Bastion, Transistor, and Pyre are all apocalyptic games. Bastion starts with The Boy waking up after the apocalypse with a handful of survivors. Transistor puts Red and her companion at the center of a digital zombie apocalypse. Pyre fits in with the theme with The Reader guiding events that result in a revolution where an old, corrupt civilization is changed. </p> <p>There's a point in the Bastion and Transistor where I realize that things just can't be fixed, and the protagonist is faced with the choice to accept loss and break the cycle, or repeat dystopian events with an apocalyptic outcome. Transistor hits me the hardest, every single time. Pyre arguably has a \"happy for now\" ending, but you can't save everyone. </p> <p>And sometimes you just need a game or novel where the best you can do is just one more day. </p>"},{"location":"Python/advent_of_code_2022_1/","title":"Advent of Code 2022, Days 1-5","text":"<p>Using Advent of Code 2022 for daily programming  exercises. My solutions are currently on a gist. It probably won't be updated on a daily basis, and I'm not committing to doing all of the problems in a timely manner. </p>"},{"location":"Python/slack-api/","title":"Python/Slack-API","text":""},{"location":"Python/slack-api/#slack-api-example","title":"Slack API Example","text":"<p>Written for: Ada task list project</p> <pre><code>import requests\nimport dotenv\nimport os\nfrom flask import jsonify\n\ndotenv.load_dotenv()\n\n\ndef slackbot_post(text):\n    \"\"\"\n    Post text to slack return tuple with status and\n    returned fields from slack.\n    \"\"\"\n\n    # REVIEW: Make asynch?\n\n    # DONE: setup error checking for environ import.\n    auth_token = \"Bearer \" + str(os.environ.get(\"SLACKBOT_TOKEN\"))\n    channel = os.environ.get(\"SLACKBOT_CHANNEL\")\n    endpoint = os.environ.get(\"SLACKBOT_ENDPOINT\")\n\n    if not (auth_token and channel and endpoint):\n        return (False, {\"ok\": False, \"message\": \"Slackbot disabled for testing.\"})\n\n    # hack to avoid spamming slack during development.\n    # PONY figure out way to set up dummy request/response objects.\n    testing = os.environ.get(\"SLACKBOT_DISABLED\")\n    if testing == \"YES\":\n        return (False, {\"ok\": False, \"message\": \"Slackbot disabled for testing.\"})\n\n    request_body = {\"channel\": channel, \"text\": text}\n\n    headers = {\"Authorization\": auth_token, \"Content-Type\": \"application/json\"}\n\n    response = requests.post(endpoint, json=request_body, headers=headers)\n\n    # throw a more helpful exception if the request fails\n    # if requests.get fails, bad data can get passed\n    # downstream.\n    if response.status_code != 200:\n        raise requests.HTTPError(f\"{response.status_code}: {response.reason}\")\n\n    # return the formatted data\n    response_data = response.json()\n    response_status = response_data.get(\"ok\", False)\n    return (response_status, response_data)\n\n\n</code></pre>"},{"location":"Python/sqlalchemy-one-to-many/","title":"SQL Alchemy One-to-Many","text":"<p>Written for: Ada task list project</p> <p>One-to-many relationship.</p>"},{"location":"Python/sqlalchemy-one-to-many/#parent","title":"Parent","text":"<pre><code>class Goal(db.Model):\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    title = db.Column(db.String, nullable=False)\n\n    # one to many\n\n    tasks = db.relationship(\"Task\", back_populates=\"goal\")\n</code></pre>"},{"location":"Python/sqlalchemy-one-to-many/#child","title":"Child","text":"<pre><code>class Task(db.Model):\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    title = db.Column(db.String, nullable=False)\n    description = db.Column(db.String)\n    completed_at = db.Column(db.DateTime)\n\n    # many to one\n    goal_id = db.Column(db.Integer, db.ForeignKey(\"goal.id\"))\n    goal = db.relationship(\"Goal\", back_populates=\"tasks\")\n\n</code></pre>"},{"location":"Shell/heroku/","title":"Workflow for creating heroku app","text":"<p><code>hobby-dev</code> might be outdated with recent service changes. </p> <pre><code>source venv/bin/activate\npip install gunicorn\npip freeze &gt; requirements.txt\ntouch Procfile\nheroku login\nheroku create kaes-task-list-api\ngit remote -v\ngit status\ngit push heroku master:main\nheroku addons:create heroku-postgresql:hobby-dev\nheroku run flask db upgrade\n</code></pre>"},{"location":"Software_Design_Notes/2022-11-18-markdown-and-resume-ontology/","title":"Markdown to Resume? Confusion","text":""},{"location":"Software_Design_Notes/2022-11-18-markdown-and-resume-ontology/#21-december-2022","title":"21 December 2022","text":"<p>I found a workable solution using the John Bookma <code>pandoc</code> templates.</p>"},{"location":"Software_Design_Notes/2022-11-18-markdown-and-resume-ontology/#18-november-2022","title":"18 November 2022","text":"<p>Something I'm spinning my wheels on is the idea of creating a web-based resume.  I'm a bit of a fan of write-once push-many and WYTIWYM (what you type is what you mean). But a problem is that as much as we'd like to pretend, the sections and subsections don't really match up to what is provided by vanilla html, and  especially markdown. Should employment location and date be formatted differently? Then you have sections that are just lists of words. </p> <p>I tried out the Pelican resume template, which  puts all the content in the python config file. I have my own fork pelican resume which modified some behavior and will rearrange some items. </p> <p>100 ways to create blog, and a handful of ways to create a digital garden. </p>"},{"location":"Software_Design_Notes/2023-01-19-ada-refactor-task-list/","title":"Modding Task List to Be Demo Friendly","text":"<p>Notes on modding the task list project to make it more friendly to download and use as a portfolio piece. My goal here is to make downloading and installing task list a bit easier for people who don't really want to go through postresql setup or downloading a separate repo for the front end. Some of the steps include:</p> <ol> <li>Setting the database to use sqlite.</li> <li>Configuring flask to hosting it's own web front-end.</li> <li>Creating install and demo scripts.</li> <li>Rewriting documentation.</li> </ol> <p>The target of this refactor is to allow for people to download and run the project needing only python3.</p> <p>Warn: These mods could break things. Do this in a fork or separate branch, and run <code>pytest</code> frequently.</p>"},{"location":"Software_Design_Notes/2023-01-19-ada-refactor-task-list/#changing-the-database-to-sqlite","title":"Changing the Database to sqlite","text":"<p>Task List was built to use postgresql. Why sqlite? Sqlite is a stand-alone database that has the following features:</p> <ol> <li>zero config</li> <li>no open ports for people who use firewalls or other port-based security</li> <li>compatible with a wide spectrum of SQL and programming languages</li> <li>no need to worry about database user permissions</li> </ol> <p>Sqlite may not scale well to full web deployment, and the ability to switch back and forth between sqlite and postgresql is very dependent on which SQL features your app uses.</p> <p>The final product for the task list backend uses python dotenv to read environment variables from a file in the root directory of the project named <code>.env</code>. Switching over is simply a matter of changing the environment variables in the <code>.env</code> file.</p> <pre><code># .env\nSQLALCHEMY_DATABASE_URI=sqlite:////tmp/test.sqlite\nSQLALCHEMY_TEST_DATABASE_URI=sqlite:////tmp/test2.sqlite\n</code></pre> <p>This config will create sqlite files in the /tmp folder of your operating system. These files are purged on a regular basis.</p> <ul> <li>SQLAlchemy connection URI documentation</li> </ul>"},{"location":"Software_Design_Notes/2023-01-19-ada-refactor-task-list/#giving-the-api-a-front-page","title":"Giving The API a Front Page","text":"<p>The next step is to copy the react front-end into our flask app, and tell the flask app to serve the front end at <code>http://localhost:5000/</code>. We also need to tell flask to serve all of the assets needed by our front page.</p> <p>In the front end development folder edit <code>package.json</code> to set the <code>homepage</code> to the URL that the page is served from.</p> <pre><code>  \\\\package.json\n  \"homepage\": \".\",\n</code></pre> <p>Build an compiled and optimized version with <code>yarn build</code> then copy the everything in your build folder into <code>task-list-api/app/static</code>. <code>static</code> is the default flask folder for serving static files. Your app folder should look something like this:</p> <pre><code>app\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 goal_routes.py\n\u251c\u2500\u2500 models\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 __pycache__\n\u2502   \u251c\u2500\u2500 goal.py\n\u2502   \u2514\u2500\u2500 task.py\n\u251c\u2500\u2500 route_helpers.py\n\u251c\u2500\u2500 slackbot.py\n\u251c\u2500\u2500 static\n\u2502   \u251c\u2500\u2500 asset-manifest.json\n\u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u251c\u2500\u2500 logo192.png\n\u2502   \u251c\u2500\u2500 logo512.png\n\u2502   \u251c\u2500\u2500 manifest.json\n\u2502   \u251c\u2500\u2500 robots.txt\n\u2502   \u2514\u2500\u2500 static\n\u251c\u2500\u2500 task_routes.py\n\u2514\u2500\u2500 util_routes.py\n</code></pre> <p>After that we need to tell flask to serve static assets at the root of our web site. Open <code>task-list-api/app/__init__.py</code> and add <code>static_url_path=\"\"</code> to the <code>Flask()</code> call in <code>create_app()</code>.</p> <pre><code># task-list-api/app/__init__.py\ndef create_app(test_config=None):\n    app = Flask(__name__, static_url_path=\"\")\n</code></pre> <p>The next configuration step sets <code>task-list-api/app/static/index.html</code> as the default web page for the server. Further down in <code>create_app()</code> add the following.</p> <pre><code># task-list-api/app/__init__.py\n\n    @app.route(\"/\")\n    def root_index():\n        return send_from_directory(\"static\", \"index.html\")\n</code></pre> <p>\"If a user requests the url <code>/</code>, send <code>index.html</code> from the <code>static</code> folder.\"</p> <p>Warn: Flask is picky about file paths. Make sure that <code>task-list-api/app/static/index.html</code> exists.</p>"},{"location":"Software_Design_Notes/2023-01-19-ada-refactor-task-list/#cors","title":"CORS","text":"<p>If you have not already done so, install and enable flask-cors.</p> <pre><code># task-list-api/app/__init__.py\n\nfrom flask_cors import CORS\n...\ndef create_app(test_config=None):\n    app = Flask(__name__, static_url_path=\"\")\n    CORS(app)\n\n</code></pre> <p>After all this, start up <code>flask serve</code> and you should find your front-end at http://localhost:5000/</p>"},{"location":"Software_Design_Notes/2023-06-22-digital-minimalism/","title":"Digital Minimalism Notes: June 2023","text":"<p>One of the things I've been working on for a few years is to reduce my exposure to \"sticky\" application and media design. This includes most social media, but also major changes to how I set up my phone to minimize distractions.</p>"},{"location":"Software_Design_Notes/2023-06-22-digital-minimalism/#feature-phone-agm-m7","title":"Feature Phone: AGM M7","text":"<p>The AGM M7 is an android-powered feature phone with a keypad interface. It comes with a limited number of apps pre-installed but no play store. Additional apps can be installed through F-Droid or sideloaded over a USB connection. The minimal apps provide basic messaging and phone functionality with few distractions.</p> <p>Using a phone with a touch screen the size of a large postage stamp comes with some drawbacks. A few apps designed for larger screens don't scale well. And it was helpful to have a google-enabled phone while traveling.</p>"},{"location":"Software_Design_Notes/2023-06-22-digital-minimalism/#degoogled-lineageos","title":"\"Degoogled\" LineageOS","text":"<p>Lineage offers builds of the open-source bits of android without the additional bits, blobs, and services added on to keep users coming back to google. Google search isn't horrible on its own, but many other features use algorithmic manipulation to keep your eyes on their advertising and promotional links. I've kept the number of installed apps to a minimum. The specific phone I'm using has some glitches, but anything I can't access by phone can also be accessed from a laptop.</p>"},{"location":"Software_Design_Notes/2023-06-22-digital-minimalism/#browser-blocking","title":"Browser Blocking","text":"<p>Current browser mods are LeechBlock NG and uBlock Origin. Each takes a slightly different approach. LeechBlock has the option of locking configs behind a random password. uBlock has the option of loading curated block-lists. uBlock can also selectively delete portions of a web site, such as comment sections and social media widgets. A single layer is trivial to disable. Multiple layers provide just enough of a delay to prevent slips.</p>"}]}